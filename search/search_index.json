{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to kmaps","text":"<p>TBA</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://ChangwhaOh.github.io/kmaps</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/ChangwhaOh/kmaps/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>kmaps could always use more documentation, whether as part of the official kmaps docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/ChangwhaOh/kmaps/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up kmaps for local development.</p> <ol> <li> <p>Fork the kmaps repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/kmaps.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv kmaps\n$ cd kmaps/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 kmaps tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/ChangwhaOh/kmaps/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"folmaps/","title":"folmaps module","text":"<p>Folium module.</p>"},{"location":"folmaps/#kmaps.folmaps.Map","title":"<code> Map            (Map)         </code>","text":"<p>Class 'Map'.</p> <p>Parameters:</p> Name Type Description Default <code>folium</code> <code>_type_</code> <p>Map object from folium.</p> required Source code in <code>kmaps/folmaps.py</code> <pre><code>class Map(folium.Map):\n\"\"\"Class 'Map'.\n\n    Args:\n        folium (_type_): Map object from folium.\n    \"\"\"\n    def __init__(self, location = [37.5, 127], zoom_start = 8, **kwargs): \n\"\"\"Create a Map.\n\n        Args:\n            location (list, optional): A coordinate representing the center of the map. Defaults to `[37.5, 127]`\n            zoom_start (int, optional): Zoom level. Defaults to 8\n        \"\"\"            \n        if 'scroll_wheel_zoom' not in kwargs:\n            kwargs['scroll_wheel_zoom'] = True\n        super().__init__(location = location, zoom_start = zoom_start, **kwargs) # inherited from the parent, in this case, ipyleaflet\n\n\n    def add_layer(self, layer):\n\"\"\"Adds a layer to the map.\n\n        Args:\n            layer (TileLayer): A TileLayer instance.\n        \"\"\"\n        layer.add_to(self)\n\n\n    def add_layer_control(self, **kwargs):\n\"\"\"Add a layer control panel to the map.\n        \"\"\"        \n        folium.LayerControl().add_to(self)\n\n\n    def add_geojson(self, data, name = 'GeoJSON', **kwargs):\n\"\"\"Add a geojson file to the map (folium version).\n\n        Args:\n            data (str): A name of the geojson file.\n            name (str, optional): A layer name of the geojson file to be displayed on the map. Defaults to 'GeoJSON'.\n        \"\"\"     \n        folium.GeoJson(data, name = name).add_to(self)\n\n    def add_shp(self, data, name = 'Shapefile', **kwargs):\n\"\"\"Add a ESRI shape file to the map (folium version).\n\n        Args:\n            data (str): A name of the shape file.\n            name (str, optional): A layer name of the shape file to be displayed on the map. Defaults to 'Shapefile'.\n        \"\"\"\n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name = name, **kwargs)\n\n\n    def add_tile_layer(self, url, name, attr = 'Tile', **kwargs):\n\"\"\"Add a tile layer to the map.\n\n        Args:\n            url (str): xyz url of the tile layer.\n            name (str): A name of the layer that would be displayed on the map.\n            attr (str, optional): A name of the attribution. Defaults to 'Tile'.\n        \"\"\"        \n        tile_layer = folium.TileLayer(\n            tiles = url,\n            name = name,\n            attr = attr,\n            **kwargs\n        )\n\n        self.add_child(tile_layer)\n\n\n    def add_basemap(self, basemap = 'roadmap', **kwargs):\n\"\"\"Add a base map to the map.\n\n        Args:\n            basemap (str): xyz url of the base map.\n\n        Raises:\n            ValueError: Error message will be raised if the url is not available.\n        \"\"\"\n\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == 'roadmap':\n            url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name = basemap, **kwargs)\n        elif basemap.lower() == 'satellite':\n            url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name = basemap, **kwargs)\n        else:\n            try:\n                basemap = eval(f'xyz.{basemap}')\n                url = basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(url, name = basemap, attr = attribution, **kwargs)\n            except:\n                raise ValueError(f'{basemap} is not found')\n\n\n    def to_streamlit(\n        self,\n        width=None,\n        height=600,\n        scrolling=False,\n        add_layer_control=True,\n        bidirectional=False,\n        **kwargs,\n    ):\n\"\"\"Renders `folium.Figure` or `folium.Map` in a Streamlit app. This method is a static Streamlit Component, meaning, no information is passed back from Leaflet on browser interaction.\n\n        Args:\n            width (int, optional): Width of the map. Defaults to None.\n            height (int, optional): Height of the map. Defaults to 600.\n            scrolling (bool, optional): Whether to allow the map to scroll. Defaults to False.\n            add_layer_control (bool, optional): Whether to add the layer control. Defaults to True.\n            bidirectional (bool, optional): Whether to add bidirectional functionality to the map. The streamlit-folium package is required to use the bidirectional functionality. Defaults to False.\n\n        Raises:\n            ImportError: If streamlit is not installed.\n\n        Returns:\n            streamlit.components: components.html object.\n        \"\"\"\n\n        try:\n            import streamlit.components.v1 as components\n\n            if add_layer_control:\n                self.add_layer_control()\n\n            if bidirectional:\n                from streamlit_folium import st_folium\n\n                output = st_folium(self, width=width, height=height)\n                return output\n            else:\n                # if responsive:\n                #     make_map_responsive = \"\"\"\n                #     &lt;style&gt;\n                #     [title~=\"st.iframe\"] { width: 100%}\n                #     &lt;/style&gt;\n                #     \"\"\"\n                #     st.markdown(make_map_responsive, unsafe_allow_html=True)\n                return components.html(\n                    self.to_html(), width=width, height=height, scrolling=scrolling\n                )\n\n        except Exception as e:\n            raise Exception(e)\n\n\n    def to_html(self, outfile=None, **kwargs):\n\"\"\"Exports a map as an HTML file.\n\n        Args:\n            outfile (str, optional): File path to the output HTML. Defaults to None.\n\n        Raises:\n            ValueError: If it is an invalid HTML file.\n\n        Returns:\n            str: A string containing the HTML code.\n        \"\"\"\n\n        if outfile is not None:\n            if not outfile.endswith(\".html\"):\n                raise ValueError(\"The output file extension must be html.\")\n            outfile = os.path.abspath(outfile)\n            out_dir = os.path.dirname(outfile)\n            if not os.path.exists(out_dir):\n                os.makedirs(out_dir)\n            self.save(outfile, **kwargs)\n        else:\n            outfile = os.path.abspath(generate_random_string(3) + \".html\")\n            self.save(outfile, **kwargs)\n            out_html = \"\"\n            with open(outfile) as f:\n                lines = f.readlines()\n                out_html = \"\".join(lines)\n            os.remove(outfile)\n            return out_html\n</code></pre>"},{"location":"folmaps/#kmaps.folmaps.Map.__init__","title":"<code>__init__(self, location=[37.5, 127], zoom_start=8, **kwargs)</code>  <code>special</code>","text":"<p>Create a Map.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>list</code> <p>A coordinate representing the center of the map. Defaults to <code>[37.5, 127]</code></p> <code>[37.5, 127]</code> <code>zoom_start</code> <code>int</code> <p>Zoom level. Defaults to 8</p> <code>8</code> Source code in <code>kmaps/folmaps.py</code> <pre><code>def __init__(self, location = [37.5, 127], zoom_start = 8, **kwargs): \n\"\"\"Create a Map.\n\n    Args:\n        location (list, optional): A coordinate representing the center of the map. Defaults to `[37.5, 127]`\n        zoom_start (int, optional): Zoom level. Defaults to 8\n    \"\"\"            \n    if 'scroll_wheel_zoom' not in kwargs:\n        kwargs['scroll_wheel_zoom'] = True\n    super().__init__(location = location, zoom_start = zoom_start, **kwargs) # inherited from the parent, in this case, ipyleaflet\n</code></pre>"},{"location":"folmaps/#kmaps.folmaps.Map.add_basemap","title":"<code>add_basemap(self, basemap='roadmap', **kwargs)</code>","text":"<p>Add a base map to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>xyz url of the base map.</p> <code>'roadmap'</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>Error message will be raised if the url is not available.</p> Source code in <code>kmaps/folmaps.py</code> <pre><code>def add_basemap(self, basemap = 'roadmap', **kwargs):\n\"\"\"Add a base map to the map.\n\n    Args:\n        basemap (str): xyz url of the base map.\n\n    Raises:\n        ValueError: Error message will be raised if the url is not available.\n    \"\"\"\n\n    import xyzservices.providers as xyz\n\n    if basemap.lower() == 'roadmap':\n        url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name = basemap, **kwargs)\n    elif basemap.lower() == 'satellite':\n        url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name = basemap, **kwargs)\n    else:\n        try:\n            basemap = eval(f'xyz.{basemap}')\n            url = basemap.build_url()\n            attribution = basemap.attribution\n            self.add_tile_layer(url, name = basemap, attr = attribution, **kwargs)\n        except:\n            raise ValueError(f'{basemap} is not found')\n</code></pre>"},{"location":"folmaps/#kmaps.folmaps.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJSON', **kwargs)</code>","text":"<p>Add a geojson file to the map (folium version).</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>A name of the geojson file.</p> required <code>name</code> <code>str</code> <p>A layer name of the geojson file to be displayed on the map. Defaults to 'GeoJSON'.</p> <code>'GeoJSON'</code> Source code in <code>kmaps/folmaps.py</code> <pre><code>def add_geojson(self, data, name = 'GeoJSON', **kwargs):\n\"\"\"Add a geojson file to the map (folium version).\n\n    Args:\n        data (str): A name of the geojson file.\n        name (str, optional): A layer name of the geojson file to be displayed on the map. Defaults to 'GeoJSON'.\n    \"\"\"     \n    folium.GeoJson(data, name = name).add_to(self)\n</code></pre>"},{"location":"folmaps/#kmaps.folmaps.Map.add_layer","title":"<code>add_layer(self, layer)</code>","text":"<p>Adds a layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>TileLayer</code> <p>A TileLayer instance.</p> required Source code in <code>kmaps/folmaps.py</code> <pre><code>def add_layer(self, layer):\n\"\"\"Adds a layer to the map.\n\n    Args:\n        layer (TileLayer): A TileLayer instance.\n    \"\"\"\n    layer.add_to(self)\n</code></pre>"},{"location":"folmaps/#kmaps.folmaps.Map.add_layer_control","title":"<code>add_layer_control(self, **kwargs)</code>","text":"<p>Add a layer control panel to the map.</p> Source code in <code>kmaps/folmaps.py</code> <pre><code>def add_layer_control(self, **kwargs):\n\"\"\"Add a layer control panel to the map.\n    \"\"\"        \n    folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"folmaps/#kmaps.folmaps.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', **kwargs)</code>","text":"<p>Add a ESRI shape file to the map (folium version).</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>A name of the shape file.</p> required <code>name</code> <code>str</code> <p>A layer name of the shape file to be displayed on the map. Defaults to 'Shapefile'.</p> <code>'Shapefile'</code> Source code in <code>kmaps/folmaps.py</code> <pre><code>def add_shp(self, data, name = 'Shapefile', **kwargs):\n\"\"\"Add a ESRI shape file to the map (folium version).\n\n    Args:\n        data (str): A name of the shape file.\n        name (str, optional): A layer name of the shape file to be displayed on the map. Defaults to 'Shapefile'.\n    \"\"\"\n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name = name, **kwargs)\n</code></pre>"},{"location":"folmaps/#kmaps.folmaps.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attr='Tile', **kwargs)</code>","text":"<p>Add a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>xyz url of the tile layer.</p> required <code>name</code> <code>str</code> <p>A name of the layer that would be displayed on the map.</p> required <code>attr</code> <code>str</code> <p>A name of the attribution. Defaults to 'Tile'.</p> <code>'Tile'</code> Source code in <code>kmaps/folmaps.py</code> <pre><code>def add_tile_layer(self, url, name, attr = 'Tile', **kwargs):\n\"\"\"Add a tile layer to the map.\n\n    Args:\n        url (str): xyz url of the tile layer.\n        name (str): A name of the layer that would be displayed on the map.\n        attr (str, optional): A name of the attribution. Defaults to 'Tile'.\n    \"\"\"        \n    tile_layer = folium.TileLayer(\n        tiles = url,\n        name = name,\n        attr = attr,\n        **kwargs\n    )\n\n    self.add_child(tile_layer)\n</code></pre>"},{"location":"folmaps/#kmaps.folmaps.Map.to_html","title":"<code>to_html(self, outfile=None, **kwargs)</code>","text":"<p>Exports a map as an HTML file.</p> <p>Parameters:</p> Name Type Description Default <code>outfile</code> <code>str</code> <p>File path to the output HTML. Defaults to None.</p> <code>None</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If it is an invalid HTML file.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string containing the HTML code.</p> Source code in <code>kmaps/folmaps.py</code> <pre><code>def to_html(self, outfile=None, **kwargs):\n\"\"\"Exports a map as an HTML file.\n\n    Args:\n        outfile (str, optional): File path to the output HTML. Defaults to None.\n\n    Raises:\n        ValueError: If it is an invalid HTML file.\n\n    Returns:\n        str: A string containing the HTML code.\n    \"\"\"\n\n    if outfile is not None:\n        if not outfile.endswith(\".html\"):\n            raise ValueError(\"The output file extension must be html.\")\n        outfile = os.path.abspath(outfile)\n        out_dir = os.path.dirname(outfile)\n        if not os.path.exists(out_dir):\n            os.makedirs(out_dir)\n        self.save(outfile, **kwargs)\n    else:\n        outfile = os.path.abspath(generate_random_string(3) + \".html\")\n        self.save(outfile, **kwargs)\n        out_html = \"\"\n        with open(outfile) as f:\n            lines = f.readlines()\n            out_html = \"\".join(lines)\n        os.remove(outfile)\n        return out_html\n</code></pre>"},{"location":"folmaps/#kmaps.folmaps.Map.to_streamlit","title":"<code>to_streamlit(self, width=None, height=600, scrolling=False, add_layer_control=True, bidirectional=False, **kwargs)</code>","text":"<p>Renders <code>folium.Figure</code> or <code>folium.Map</code> in a Streamlit app. This method is a static Streamlit Component, meaning, no information is passed back from Leaflet on browser interaction.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Width of the map. Defaults to None.</p> <code>None</code> <code>height</code> <code>int</code> <p>Height of the map. Defaults to 600.</p> <code>600</code> <code>scrolling</code> <code>bool</code> <p>Whether to allow the map to scroll. Defaults to False.</p> <code>False</code> <code>add_layer_control</code> <code>bool</code> <p>Whether to add the layer control. Defaults to True.</p> <code>True</code> <code>bidirectional</code> <code>bool</code> <p>Whether to add bidirectional functionality to the map. The streamlit-folium package is required to use the bidirectional functionality. Defaults to False.</p> <code>False</code> <p>Exceptions:</p> Type Description <code>ImportError</code> <p>If streamlit is not installed.</p> <p>Returns:</p> Type Description <code>streamlit.components</code> <p>components.html object.</p> Source code in <code>kmaps/folmaps.py</code> <pre><code>def to_streamlit(\n    self,\n    width=None,\n    height=600,\n    scrolling=False,\n    add_layer_control=True,\n    bidirectional=False,\n    **kwargs,\n):\n\"\"\"Renders `folium.Figure` or `folium.Map` in a Streamlit app. This method is a static Streamlit Component, meaning, no information is passed back from Leaflet on browser interaction.\n\n    Args:\n        width (int, optional): Width of the map. Defaults to None.\n        height (int, optional): Height of the map. Defaults to 600.\n        scrolling (bool, optional): Whether to allow the map to scroll. Defaults to False.\n        add_layer_control (bool, optional): Whether to add the layer control. Defaults to True.\n        bidirectional (bool, optional): Whether to add bidirectional functionality to the map. The streamlit-folium package is required to use the bidirectional functionality. Defaults to False.\n\n    Raises:\n        ImportError: If streamlit is not installed.\n\n    Returns:\n        streamlit.components: components.html object.\n    \"\"\"\n\n    try:\n        import streamlit.components.v1 as components\n\n        if add_layer_control:\n            self.add_layer_control()\n\n        if bidirectional:\n            from streamlit_folium import st_folium\n\n            output = st_folium(self, width=width, height=height)\n            return output\n        else:\n            # if responsive:\n            #     make_map_responsive = \"\"\"\n            #     &lt;style&gt;\n            #     [title~=\"st.iframe\"] { width: 100%}\n            #     &lt;/style&gt;\n            #     \"\"\"\n            #     st.markdown(make_map_responsive, unsafe_allow_html=True)\n            return components.html(\n                self.to_html(), width=width, height=height, scrolling=scrolling\n            )\n\n    except Exception as e:\n        raise Exception(e)\n</code></pre>"},{"location":"folmaps/#kmaps.folmaps.generate_random_string","title":"<code>generate_random_string(length, upper=False, digit=False, punc=False)</code>","text":"<p>Generates a random string of a given length.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>A length of the string.</p> required <code>upper</code> <code>bool</code> <p>Whether you would like to contain upper case alphabets in your string pool or not. Defaults to False.</p> <code>False</code> <code>digit</code> <code>bool</code> <p>Whether you would like to contain digits in your string pool or not. Defaults to False.</p> <code>False</code> <code>punc</code> <code>bool</code> <p>Whether you would like to contain punctuations in your string pool or not. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Generated random string.</p> Source code in <code>kmaps/folmaps.py</code> <pre><code>def generate_random_string(length, upper = False, digit = False, punc = False):\n\"\"\"Generates a random string of a given length.\n\n    Args:\n        length (int): A length of the string.\n        upper (bool, optional): Whether you would like to contain upper case alphabets in your string pool or not. Defaults to False.\n        digit (bool, optional): Whether you would like to contain digits in your string pool or not. Defaults to False.\n        punc (bool, optional): Whether you would like to contain punctuations in your string pool or not. Defaults to False.\n\n    Returns:\n        str: Generated random string.\n    \"\"\"\n    chars = string.ascii_lowercase\n    if upper:\n        chars += string.ascii_uppercase\n    if digit:\n        chars += string.digits\n    if punc:\n        chars += string.punctuation\n\n    result_str = ''.join(random.choice(chars) for i in range(length))\n    return result_str\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install kmaps, run this command in your terminal:</p> <pre><code>pip install kmaps\n</code></pre> <p>This is the preferred method to install kmaps, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for kmaps can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/ChangwhaOh/kmaps\n</code></pre>"},{"location":"kmaps/","title":"kmaps module","text":"<p>Main module.</p>"},{"location":"kmaps/#kmaps.kmaps.Map","title":"<code> Map            (Map)         </code>","text":"<p>Class 'Map'</p> Source code in <code>kmaps/kmaps.py</code> <pre><code>class Map(ipyleaflet.Map):\n\"\"\"Class 'Map'\n    \"\"\"\n    def __init__(self, center = [37.5, 127], zoom = 8, **kwargs):\n\"\"\"Create a Map.\n\n        Args:\n            center (list, optional): A coordinate representing the center of the map. Defaults to `[37.5, 127]`\n            zoom (int, optional): Zoom level. Defaults to 8\n        \"\"\"        \n        if 'scroll_wheel_zoom' not in kwargs:\n            kwargs['scroll_wheel_zoom'] = True\n        super().__init__(center = center, zoom = zoom, **kwargs) # inherited from the parent, in this case, ipyleaflet\n\n        if 'layers_control' not in kwargs:\n            kwargs['layers_control'] = True\n\n        if kwargs['layers_control']:\n            self.add_layers_control()\n\n        #self.add_states_dropdown()\n        self.add_search_control()\n\n\n    def add_states_dropdown(self, position = 'bottomright', **kwargs):\n\"\"\"Add a dropdown widget to move to selected state to the map.\n\n        Args:\n            position (str, optional): Position of the widget. Defaults to 'bottomright'.\n        \"\"\"            \n        states_list = [('Initial Location', self.center), \n            ('Alabama', [32.78, -86.83]), ('Alaska', [64.07, -152.28]), \n            ('Arizona', [34.27, -111.66]), ('Arkansas', [34.89, -92.44]),\n            ('California', [37.18, -119.47]), ('Colorado', [39.00, -105.55]),\n            ('Connecticut', [41.62, -72.73]), ('Delaware', [38.99, -75.51]),\n            ('District of Columbia', [38.91, -77.01]), ('Florida', [28.63, -82.45]),\n            ('Georgia', [32.64, -83.44]), ('Hawaii', [20.29, -156.37]),\n            ('Idaho', [44.35, -114.61]), ('Illinois', [40.04, -89.20]),\n            ('Indiana', [39.89, -86.28]), ('Iowa', [42.08, -93.50]),\n            ('Kansas', [38.49, -98.38]), ('Kentucky', [37.53, -85.30]),\n            ('Louisiana', [31.07, -92.00]), ('Maine', [45.37, -69.24]),\n            ('Maryland', [39.06, -76.80]), ('Massachusetts', [42.26, -71.81]),\n            ('Michigan', [44.35, -85.41]), ('Minnesota', [46.28, -94.31]),\n            ('Mississippi', [32.74, -89.67]), \n            ('Montana', [47.05, -109.63]), ('Nebraska', [41.54, -99.80]),\n            ('Nevada', [39.33, -116.63]), ('New Hampshire', [43.68, -71.58]),\n            ('New Jersey', [40.19, -74.67]), ('New Mexico', [34.41, -106.11]),\n            ('New York', [42.95, -75.53]), ('North Carolina', [35.56, -79.39]),\n            ('North Dakota', [47.45, -100.47]), ('Ohio', [40.29, -82.79]),\n            ('Oklahoma', [35.59, -97.49]), ('Oregon', [43.93, -120.56]),\n            ('Pennsylvania', [40.88, -77.80]), ('Rhode Island', [41.68, -71.56]),\n            ('South Carolina', [33.92, -80.90]), ('South Dakota', [44.44, -100.23]),\n            ('Tennessee', [35.86, -86.35]), ('Texas', [31.48, -99.33]),\n            ('Utah', [39.31, -111.67]), ('Vermont', [44.07, -72.67]),\n            ('Virginia', [37.52, -78.85]), ('Washington', [47.38, -120.45]),\n            ('West Virginia', [38.64, -80.62]), ('Wisconsin', [44.62, -89.99]),\n            ('Wyoming', [43.00, -107.55])]\n        states_dropdown = widgets.Dropdown(\n            options = states_list,\n            value = self.center,\n            description = 'States',\n            style = {'description_width': 'initial'}\n        )\n\n        states_control = ipyleaflet.WidgetControl(widget = states_dropdown, position = position)\n        self.add(states_control)\n\n        widgets.link((self, 'center'), (states_dropdown, 'value'))\n\n\n    def add_base_dropdown(self, **kwargs):\n\"\"\"Add a dropdown ipywidget that provides options for a basemap from xyz.services.\n        \"\"\"        \n        output_widget = widgets.Output(layout={'border': '1px solid black'})\n        output_widget.clear_output()\n        basemap_ctrl = ipyleaflet.WidgetControl(widget=output_widget, position='bottomright')\n        self.add_control(basemap_ctrl)\n\n        dropdown = widgets.Dropdown(\n            options = [\"Topo\", \"ShadeRelief\", \"Gray\"], \n            value=None,\n            description='Basemap',\n            )\n\n        close_button = widgets.ToggleButton(\n            value=True,\n            tooltip=\"Open or close basemap selector\",\n            icon=\"desktop\",\n            button_style=\"primary\",\n            #layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n        close_button\n\n        h = widgets.VBox([close_button, dropdown])\n\n        with output_widget:\n            # if basemap_ctrl not in leaflet_map.controls:\n            display(h)\n\n        def change_basemap(change):\n            if change[\"new\"] == \"Topo\":\n                self.add_basemap(basemap= \"Esri.WorldTopoMap\")\n            if change[\"new\"] == \"ShadeRelief\":\n                self.add_basemap(basemap= \"Esri.WorldShadedRelief\")\n            if change[\"new\"] == \"Gray\":\n                self.add_basemap(basemap= \"Esri.WorldGrayCanvas\")\n\n        dropdown.observe(change_basemap, \"value\")\n\n        def close_basemap(change):\n            if change[\"new\"] == True:\n                output_widget.clear_output()\n                with output_widget:\n                    # if basemap_ctrl not in leaflet_map.controls:\n                    display(h)\n            else:\n                output_widget.clear_output()\n                with output_widget:\n                    # if basemap_ctrl not in leaflet_map.controls:\n                    display(close_button)\n\n        close_button.observe(close_basemap, \"value\")\n\n\n    def add_search_control(self, position = 'topleft', **kwargs):\n\"\"\"Add a search control panel to the map.\n\n        Args:\n            position (str, optional): The location of the search control panel. Defaults to 'topleft'.\n        \"\"\"        \n        if 'url' not in kwargs:\n            kwargs['url'] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n        search_control = ipyleaflet.SearchControl(position = position, **kwargs)\n        self.add_control(search_control)\n\n\n    def add_draw_control(self, position = 'topleft', **kwargs):\n\"\"\"Add a draw control panel to the map.\n\n        Args:\n            position (str, optional): The location of the draw control panel. Defaults to 'topleft'.\n        \"\"\"        \n        draw_control = ipyleaflet.DrawControl(position = position, **kwargs)\n        self.add_control(draw_control)\n\n\n    def add_layers_control(self, position = 'topright', **kwargs):\n\"\"\"Add a layers control panel to the map.\n\n        Args:\n            position (str, optional): The location of the layers control panel. Defaults to 'topright'.\n        \"\"\"        \n        layers_control = ipyleaflet.LayersControl(position = position, **kwargs)\n        self.add_control(layers_control)\n\n\n    def add_tile_layer(self, url, name, attribution = '', **kwargs):\n\"\"\"Add a tile layer to the map.\n\n        Args:\n            url (str): xyz url of the tile layer.\n            name (str): A name of the layer that would be displayed on the map.\n            attribution (str, optional): A name of the attribution. Defaults to ''.\n        \"\"\"        \n        tile_layer = ipyleaflet.TileLayer(\n            url = url,\n            name = name,\n            attribution = attribution,\n            **kwargs\n        )\n        self.add_layer(tile_layer)\n\n\n    def add_basemap(self, url = xyz.Esri.WorldImagery.build_url(), basemap=\"Esri.WorldImagery\", **kwargs):\n\"\"\"Add a basemap from xyz.services\n\n        Args:\n            url (string, optional: URL to xyz.services map. Defaults to xyz.Esri.WorldImagery.build_url().\n            basemap (str, optional): Name of the basemap on xyz.services. Defaults to \"Esri.WorldImagery\".\n\n        Raises:\n            ValueError: If basemap does not exist.\n        \"\"\"        \n        try:\n            basemap = eval(f\"xyz.{basemap}\")\n            url = basemap.build_url()\n            attribution = basemap.attribution\n            b = self.add_tile_layer(url, name = basemap.name, attribution=attribution, **kwargs)\n            return b\n\n        except:\n            raise ValueError(f\"Basemap '{basemap}' not found.\")\n\n\n    def add_geojson(self, data, name = 'GeoJSON', **kwargs):\n\"\"\"Add a geojson file to the map.\n\n        Args:\n            data (str): A name of the geojson file.\n            name (str, optional): A layer name of the geojson file to be displayed on the map. Defaults to 'GeoJSON'.\n        \"\"\"        \n        if isinstance(data, str):\n            import json\n            with open(data, 'r') as f:\n                data = json.load(f)\n\n        geojson = ipyleaflet.GeoJSON(data = data, name = name, **kwargs)\n        self.add_layer(geojson)\n\n\n    def add_shp(self, data, name = 'Shapefile', fit_bounds = True,  **kwargs):\n\"\"\"Add a ESRI shape file to the map.\n\n        Args:\n            data (str): A name of the shape file.\n            name (str, optional): A layer name of the shape file to be displayed on the map. Defaults to 'Shapefile'.\n        \"\"\"\n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n\n        # Access the geometry column\n        geometry = gdf.geometry\n\n        # Extract x and y coordinates\n        x_coords = geometry.x\n        y_coords = geometry.y\n\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name = name, **kwargs)\n\n        # [[south, west], [north, east]]\n        if fit_bounds:\n            bbox = [[min(y_coords), min(x_coords)], [max(y_coords), max(x_coords)]]\n            self.fit_bounds(bbox)\n\n\n    def add_Weber(self, data, attribute, name = 'WeberPoint',  **kwargs):\n\"\"\"Add the optimal location of the single-facility Weber problem on the map with the input shapefile.\n\n        Args:\n            data (GeoDataFrame): A geopandas GeoDataFrame. Must be a point file.\n            attribute (str): A column name of the GeoDataFrame that contains the weight attribute \n            name (str, optional): A name of the weber ooint layer. Defaults to 'WeberPoint'.\n        \"\"\"        \n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        r = weber(gdf, attribute)\n\n        geojson = r.__geo_interface__\n        self.add_geojson(geojson, name = name, **kwargs)\n\n\n    def add_cmark(self, location, **kwargs):\n\"\"\"Add a circle marker to the map.\n\n        Args:\n            location (tuple): XY coordinate of the marker.\n        \"\"\"        \n        circle_marker = ipyleaflet.CircleMarker()\n        circle_marker.location = location\n        circle_marker.radius = 3\n        circle_marker.color = \"red\"\n        circle_marker.fill_color = \"red\"\n\n        self.add_layer(circle_marker)\n\n\n    def add_pmedian():\n        print('')\n\n\n\n    def add_raster(self, url, name = 'Raster', fit_bounds = True, **kwargs):\n\"\"\"Add a raster file to the map.\n\n        Args:\n            url (str): An url of the raster image.\n            name (str, optional): A layer name of the raster to be displayed on the map. Defaults to 'Raster'.\n            fit_bounds (bool, optional): Move a display of the map to the raster image location. Defaults to True.\n        \"\"\"        \n        import httpx\n\n        titiler_endpoint = 'https://titiler.xyz'\n\n        # get a bbox\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/info\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        bounds = r[\"bounds\"]\n\n        # get a url\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/tilejson.json\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        tile = r['tiles'][0]\n\n        self.add_tile_layer(url = tile, name = name, **kwargs)\n\n        if fit_bounds:\n            bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n            self.fit_bounds(bbox)\n\n\n    def add_vector(\n        self,\n        filename,\n        layer_name = 'Vector data',\n        **kwargs,\n    ):\n\"\"\"Add a vector layer to the map\n\n        Args:\n            filename (str): The name of the vector file.\n            layer_name (str, optional): A layer name to be shown on the map. Defaults to 'Vector data'.\n        \"\"\"    \n        import os\n        if not filename.startswith('http'):\n            filename = os.path.abspath(filename)\n        else:\n            filename = github_raw_url(filename)\n        ext = os.path.splitext(filename)[1].lower()\n        if ext == '.shp':\n            self.add_shp(\n                filename,\n                layer_name\n            )\n        elif ext in ['.json', '.geojson']:\n            self.add_geojson(\n                filename,\n                layer_name\n            )\n        else:\n            geojson = vector_to_geojson(\n                filename,\n                bbox = bbox,\n                mask = mask,\n                rows = rows,\n                epsg = '4326',\n                **kwargs,\n            )\n\n            self.add_geojson(\n                geojson,\n                layer_name\n            )\n\n\n    def add_image(self, url, width, height, position = 'bottomright'):\n\"\"\"Add an image file to the map.\n\n        Args:\n            url (str): An url of the image.\n            width (float): width of the image to be displayed\n            height (float): height of the image to be displayed\n            position (_type_, optional): Position argument. Defaults to 'bottomright'.\n        \"\"\"        \n        from ipyleaflet import WidgetControl\n        import ipywidgets as widgets\n\n        widget = widgets.HTML(value = f'&lt;img src=\"{url}\" width = \"{width}\" height = \"{height}\"&gt;')\n        control = WidgetControl(widget = widget, position = position)\n        self.add(control)\n\n\n    def to_streamlit(self, width=None, height=600, scrolling=False, **kwargs):\n        ####### just copied from leafmap\n\"\"\"Renders map figure in a Streamlit app.\n        Args:\n            width (int, optional): Width of the map. Defaults to None.\n            height (int, optional): Height of the map. Defaults to 600.\n            responsive (bool, optional): Whether to make the map responsive. Defaults to True.\n            scrolling (bool, optional): If True, show a scrollbar when the content is larger than the iframe. Otherwise, do not show a scrollbar. Defaults to False.\n        Returns:\n            streamlit.components: components.html object.\n        \"\"\"\n\n        try:\n            import streamlit.components.v1 as components\n\n            # if responsive:\n            #     make_map_responsive = \"\"\"\n            #     &lt;style&gt;\n            #     [title~=\"st.iframe\"] { width: 100%}\n            #     &lt;/style&gt;\n            #     \"\"\"\n            #     st.markdown(make_map_responsive, unsafe_allow_html=True)\n            return components.html(\n                self.to_html(), width=width, height=height, scrolling=scrolling\n            )\n\n        except Exception as e:\n            raise Exception(e)\n\n\n    def to_html(\n        self,\n        outfile=None,\n        title=\"My Map\",\n        width=\"100%\",\n        height=\"880px\",\n        **kwargs,\n    ):\n        ####### just copied from leafmap\n\"\"\"Saves the map as an HTML file.\n        Args:\n            outfile (str, optional): The output file path to the HTML file.\n            title (str, optional): The title of the HTML file. Defaults to 'My Map'.\n            width (str, optional): The width of the map in pixels or percentage. Defaults to '100%'.\n            height (str, optional): The height of the map in pixels. Defaults to '880px'.\n            add_layer_control (bool, optional): Whether to add the LayersControl. Defaults to True.\n        \"\"\"\n        try:\n            save = True\n            if outfile is not None:\n                if not outfile.endswith(\".html\"):\n                    raise ValueError(\"The output file extension must be html.\")\n                outfile = os.path.abspath(outfile)\n                out_dir = os.path.dirname(outfile)\n                if not os.path.exists(out_dir):\n                    os.makedirs(out_dir)\n            else:\n                outfile = os.path.abspath(generate_random_string(3) + \".html\")\n                save = False\n\n'''\n            if add_layer_control and self.layer_control is None:\n                layer_control = ipyleaflet.LayersControl(position=\"topright\")\n                self.layer_control = layer_control\n                self.add(layer_control)\n            '''\n\n            before_width = self.layout.width\n            before_height = self.layout.height\n\n            if not isinstance(width, str):\n                print(\"width must be a string.\")\n                return\n            elif width.endswith(\"px\") or width.endswith(\"%\"):\n                pass\n            else:\n                print(\"width must end with px or %\")\n                return\n\n            if not isinstance(height, str):\n                print(\"height must be a string.\")\n                return\n            elif not height.endswith(\"px\"):\n                print(\"height must end with px\")\n                return\n\n            self.layout.width = width\n            self.layout.height = height\n\n            self.save(outfile, title=title, **kwargs)\n\n            self.layout.width = before_width\n            self.layout.height = before_height\n\n            if not save:\n                out_html = \"\"\n                with open(outfile) as f:\n                    lines = f.readlines()\n                    out_html = \"\".join(lines)\n                os.remove(outfile)\n                return out_html\n\n        except Exception as e:\n            raise Exception(e)\n\n    # final exam Q2\n    def add_points_from_csv(self, in_csv, x=\"longitude\", y=\"latitude\", layer_name=\"Marker cluster\"):\n\"\"\"Add point marker cluster to the map.\n\n        Args:\n            in_csv (str): csv file name\n            x (str, optional): The column name that contains X coordinates. Defaults to \"longitude\".\n            y (str, optional): The column name that contains Y coordinates. Defaults to \"latitude\".\n            layer_name (str, optional): A layer name. Defaults to \"Marker cluster\".\n        \"\"\"        \n        df = pd.read_csv(in_csv)\n\n        Xls = df[x]\n        Yls = df[y]\n\n        ls = []\n        for i in range(len(df)):\n            marker = ipyleaflet.Marker(location = (Yls[i], Xls[i]))\n            ls.append(marker)\n\n        marker_cluster = ipyleaflet.MarkerCluster(markers = ls)\n        self.add_layer(marker_cluster)\n\n\n'''\n    # final exam Q3\n    def add_select_mc(self, position = 'bottomright', **kwargs):\n        import ipyfilechooser\n        import os\n        path = os.getcwd()\n        output_widget = widgets.Output(layout={'border': '1px solid black'})\n        output_widget.clear_output()\n        selection = ipyfilechooser.FileChooser(path)\n\n        button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Apply\",\n            icon=\"wrench\"\n        )\n\n        v = widgets.VBox([selection, button])\n\n        control = ipyleaflet.WidgetControl(widget = v, position = 'bottomright')\n        self.add(control)\n\n        def button_click(change):\n            if change[\"new\"]:\n                try: \n                    self.add_points_from_csv(selection.selected)\n                except Exception as e:\n                    raise Exception(e)\n\n        button.observe(button_click, \"value\")\n    '''\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.__init__","title":"<code>__init__(self, center=[37.5, 127], zoom=8, **kwargs)</code>  <code>special</code>","text":"<p>Create a Map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>A coordinate representing the center of the map. Defaults to <code>[37.5, 127]</code></p> <code>[37.5, 127]</code> <code>zoom</code> <code>int</code> <p>Zoom level. Defaults to 8</p> <code>8</code> Source code in <code>kmaps/kmaps.py</code> <pre><code>def __init__(self, center = [37.5, 127], zoom = 8, **kwargs):\n\"\"\"Create a Map.\n\n    Args:\n        center (list, optional): A coordinate representing the center of the map. Defaults to `[37.5, 127]`\n        zoom (int, optional): Zoom level. Defaults to 8\n    \"\"\"        \n    if 'scroll_wheel_zoom' not in kwargs:\n        kwargs['scroll_wheel_zoom'] = True\n    super().__init__(center = center, zoom = zoom, **kwargs) # inherited from the parent, in this case, ipyleaflet\n\n    if 'layers_control' not in kwargs:\n        kwargs['layers_control'] = True\n\n    if kwargs['layers_control']:\n        self.add_layers_control()\n\n    #self.add_states_dropdown()\n    self.add_search_control()\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.add_Weber","title":"<code>add_Weber(self, data, attribute, name='WeberPoint', **kwargs)</code>","text":"<p>Add the optimal location of the single-facility Weber problem on the map with the input shapefile.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>GeoDataFrame</code> <p>A geopandas GeoDataFrame. Must be a point file.</p> required <code>attribute</code> <code>str</code> <p>A column name of the GeoDataFrame that contains the weight attribute </p> required <code>name</code> <code>str</code> <p>A name of the weber ooint layer. Defaults to 'WeberPoint'.</p> <code>'WeberPoint'</code> Source code in <code>kmaps/kmaps.py</code> <pre><code>def add_Weber(self, data, attribute, name = 'WeberPoint',  **kwargs):\n\"\"\"Add the optimal location of the single-facility Weber problem on the map with the input shapefile.\n\n    Args:\n        data (GeoDataFrame): A geopandas GeoDataFrame. Must be a point file.\n        attribute (str): A column name of the GeoDataFrame that contains the weight attribute \n        name (str, optional): A name of the weber ooint layer. Defaults to 'WeberPoint'.\n    \"\"\"        \n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    r = weber(gdf, attribute)\n\n    geojson = r.__geo_interface__\n    self.add_geojson(geojson, name = name, **kwargs)\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.add_base_dropdown","title":"<code>add_base_dropdown(self, **kwargs)</code>","text":"<p>Add a dropdown ipywidget that provides options for a basemap from xyz.services.</p> Source code in <code>kmaps/kmaps.py</code> <pre><code>def add_base_dropdown(self, **kwargs):\n\"\"\"Add a dropdown ipywidget that provides options for a basemap from xyz.services.\n    \"\"\"        \n    output_widget = widgets.Output(layout={'border': '1px solid black'})\n    output_widget.clear_output()\n    basemap_ctrl = ipyleaflet.WidgetControl(widget=output_widget, position='bottomright')\n    self.add_control(basemap_ctrl)\n\n    dropdown = widgets.Dropdown(\n        options = [\"Topo\", \"ShadeRelief\", \"Gray\"], \n        value=None,\n        description='Basemap',\n        )\n\n    close_button = widgets.ToggleButton(\n        value=True,\n        tooltip=\"Open or close basemap selector\",\n        icon=\"desktop\",\n        button_style=\"primary\",\n        #layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n    )\n    close_button\n\n    h = widgets.VBox([close_button, dropdown])\n\n    with output_widget:\n        # if basemap_ctrl not in leaflet_map.controls:\n        display(h)\n\n    def change_basemap(change):\n        if change[\"new\"] == \"Topo\":\n            self.add_basemap(basemap= \"Esri.WorldTopoMap\")\n        if change[\"new\"] == \"ShadeRelief\":\n            self.add_basemap(basemap= \"Esri.WorldShadedRelief\")\n        if change[\"new\"] == \"Gray\":\n            self.add_basemap(basemap= \"Esri.WorldGrayCanvas\")\n\n    dropdown.observe(change_basemap, \"value\")\n\n    def close_basemap(change):\n        if change[\"new\"] == True:\n            output_widget.clear_output()\n            with output_widget:\n                # if basemap_ctrl not in leaflet_map.controls:\n                display(h)\n        else:\n            output_widget.clear_output()\n            with output_widget:\n                # if basemap_ctrl not in leaflet_map.controls:\n                display(close_button)\n\n    close_button.observe(close_basemap, \"value\")\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.add_basemap","title":"<code>add_basemap(self, url='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', basemap='Esri.WorldImagery', **kwargs)</code>","text":"<p>Add a basemap from xyz.services</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>string</code> <p>URL to xyz.services map. Defaults to xyz.Esri.WorldImagery.build_url().</p> <code>'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'</code> <code>basemap</code> <code>str</code> <p>Name of the basemap on xyz.services. Defaults to \"Esri.WorldImagery\".</p> <code>'Esri.WorldImagery'</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If basemap does not exist.</p> Source code in <code>kmaps/kmaps.py</code> <pre><code>def add_basemap(self, url = xyz.Esri.WorldImagery.build_url(), basemap=\"Esri.WorldImagery\", **kwargs):\n\"\"\"Add a basemap from xyz.services\n\n    Args:\n        url (string, optional: URL to xyz.services map. Defaults to xyz.Esri.WorldImagery.build_url().\n        basemap (str, optional): Name of the basemap on xyz.services. Defaults to \"Esri.WorldImagery\".\n\n    Raises:\n        ValueError: If basemap does not exist.\n    \"\"\"        \n    try:\n        basemap = eval(f\"xyz.{basemap}\")\n        url = basemap.build_url()\n        attribution = basemap.attribution\n        b = self.add_tile_layer(url, name = basemap.name, attribution=attribution, **kwargs)\n        return b\n\n    except:\n        raise ValueError(f\"Basemap '{basemap}' not found.\")\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.add_cmark","title":"<code>add_cmark(self, location, **kwargs)</code>","text":"<p>Add a circle marker to the map.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>tuple</code> <p>XY coordinate of the marker.</p> required Source code in <code>kmaps/kmaps.py</code> <pre><code>def add_cmark(self, location, **kwargs):\n\"\"\"Add a circle marker to the map.\n\n    Args:\n        location (tuple): XY coordinate of the marker.\n    \"\"\"        \n    circle_marker = ipyleaflet.CircleMarker()\n    circle_marker.location = location\n    circle_marker.radius = 3\n    circle_marker.color = \"red\"\n    circle_marker.fill_color = \"red\"\n\n    self.add_layer(circle_marker)\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.add_draw_control","title":"<code>add_draw_control(self, position='topleft', **kwargs)</code>","text":"<p>Add a draw control panel to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The location of the draw control panel. Defaults to 'topleft'.</p> <code>'topleft'</code> Source code in <code>kmaps/kmaps.py</code> <pre><code>def add_draw_control(self, position = 'topleft', **kwargs):\n\"\"\"Add a draw control panel to the map.\n\n    Args:\n        position (str, optional): The location of the draw control panel. Defaults to 'topleft'.\n    \"\"\"        \n    draw_control = ipyleaflet.DrawControl(position = position, **kwargs)\n    self.add_control(draw_control)\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJSON', **kwargs)</code>","text":"<p>Add a geojson file to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>A name of the geojson file.</p> required <code>name</code> <code>str</code> <p>A layer name of the geojson file to be displayed on the map. Defaults to 'GeoJSON'.</p> <code>'GeoJSON'</code> Source code in <code>kmaps/kmaps.py</code> <pre><code>def add_geojson(self, data, name = 'GeoJSON', **kwargs):\n\"\"\"Add a geojson file to the map.\n\n    Args:\n        data (str): A name of the geojson file.\n        name (str, optional): A layer name of the geojson file to be displayed on the map. Defaults to 'GeoJSON'.\n    \"\"\"        \n    if isinstance(data, str):\n        import json\n        with open(data, 'r') as f:\n            data = json.load(f)\n\n    geojson = ipyleaflet.GeoJSON(data = data, name = name, **kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.add_image","title":"<code>add_image(self, url, width, height, position='bottomright')</code>","text":"<p>Add an image file to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>An url of the image.</p> required <code>width</code> <code>float</code> <p>width of the image to be displayed</p> required <code>height</code> <code>float</code> <p>height of the image to be displayed</p> required <code>position</code> <code>_type_</code> <p>Position argument. Defaults to 'bottomright'.</p> <code>'bottomright'</code> Source code in <code>kmaps/kmaps.py</code> <pre><code>def add_image(self, url, width, height, position = 'bottomright'):\n\"\"\"Add an image file to the map.\n\n    Args:\n        url (str): An url of the image.\n        width (float): width of the image to be displayed\n        height (float): height of the image to be displayed\n        position (_type_, optional): Position argument. Defaults to 'bottomright'.\n    \"\"\"        \n    from ipyleaflet import WidgetControl\n    import ipywidgets as widgets\n\n    widget = widgets.HTML(value = f'&lt;img src=\"{url}\" width = \"{width}\" height = \"{height}\"&gt;')\n    control = WidgetControl(widget = widget, position = position)\n    self.add(control)\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright', **kwargs)</code>","text":"<p>Add a layers control panel to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The location of the layers control panel. Defaults to 'topright'.</p> <code>'topright'</code> Source code in <code>kmaps/kmaps.py</code> <pre><code>def add_layers_control(self, position = 'topright', **kwargs):\n\"\"\"Add a layers control panel to the map.\n\n    Args:\n        position (str, optional): The location of the layers control panel. Defaults to 'topright'.\n    \"\"\"        \n    layers_control = ipyleaflet.LayersControl(position = position, **kwargs)\n    self.add_control(layers_control)\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.add_points_from_csv","title":"<code>add_points_from_csv(self, in_csv, x='longitude', y='latitude', layer_name='Marker cluster')</code>","text":"<p>Add point marker cluster to the map.</p> <p>Parameters:</p> Name Type Description Default <code>in_csv</code> <code>str</code> <p>csv file name</p> required <code>x</code> <code>str</code> <p>The column name that contains X coordinates. Defaults to \"longitude\".</p> <code>'longitude'</code> <code>y</code> <code>str</code> <p>The column name that contains Y coordinates. Defaults to \"latitude\".</p> <code>'latitude'</code> <code>layer_name</code> <code>str</code> <p>A layer name. Defaults to \"Marker cluster\".</p> <code>'Marker cluster'</code> Source code in <code>kmaps/kmaps.py</code> <pre><code>def add_points_from_csv(self, in_csv, x=\"longitude\", y=\"latitude\", layer_name=\"Marker cluster\"):\n\"\"\"Add point marker cluster to the map.\n\n    Args:\n        in_csv (str): csv file name\n        x (str, optional): The column name that contains X coordinates. Defaults to \"longitude\".\n        y (str, optional): The column name that contains Y coordinates. Defaults to \"latitude\".\n        layer_name (str, optional): A layer name. Defaults to \"Marker cluster\".\n    \"\"\"        \n    df = pd.read_csv(in_csv)\n\n    Xls = df[x]\n    Yls = df[y]\n\n    ls = []\n    for i in range(len(df)):\n        marker = ipyleaflet.Marker(location = (Yls[i], Xls[i]))\n        ls.append(marker)\n\n    marker_cluster = ipyleaflet.MarkerCluster(markers = ls)\n    self.add_layer(marker_cluster)\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.add_raster","title":"<code>add_raster(self, url, name='Raster', fit_bounds=True, **kwargs)</code>","text":"<p>Add a raster file to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>An url of the raster image.</p> required <code>name</code> <code>str</code> <p>A layer name of the raster to be displayed on the map. Defaults to 'Raster'.</p> <code>'Raster'</code> <code>fit_bounds</code> <code>bool</code> <p>Move a display of the map to the raster image location. Defaults to True.</p> <code>True</code> Source code in <code>kmaps/kmaps.py</code> <pre><code>def add_raster(self, url, name = 'Raster', fit_bounds = True, **kwargs):\n\"\"\"Add a raster file to the map.\n\n    Args:\n        url (str): An url of the raster image.\n        name (str, optional): A layer name of the raster to be displayed on the map. Defaults to 'Raster'.\n        fit_bounds (bool, optional): Move a display of the map to the raster image location. Defaults to True.\n    \"\"\"        \n    import httpx\n\n    titiler_endpoint = 'https://titiler.xyz'\n\n    # get a bbox\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/info\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    bounds = r[\"bounds\"]\n\n    # get a url\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/tilejson.json\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    tile = r['tiles'][0]\n\n    self.add_tile_layer(url = tile, name = name, **kwargs)\n\n    if fit_bounds:\n        bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n        self.fit_bounds(bbox)\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Add a search control panel to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The location of the search control panel. Defaults to 'topleft'.</p> <code>'topleft'</code> Source code in <code>kmaps/kmaps.py</code> <pre><code>def add_search_control(self, position = 'topleft', **kwargs):\n\"\"\"Add a search control panel to the map.\n\n    Args:\n        position (str, optional): The location of the search control panel. Defaults to 'topleft'.\n    \"\"\"        \n    if 'url' not in kwargs:\n        kwargs['url'] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n    search_control = ipyleaflet.SearchControl(position = position, **kwargs)\n    self.add_control(search_control)\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', fit_bounds=True, **kwargs)</code>","text":"<p>Add a ESRI shape file to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>A name of the shape file.</p> required <code>name</code> <code>str</code> <p>A layer name of the shape file to be displayed on the map. Defaults to 'Shapefile'.</p> <code>'Shapefile'</code> Source code in <code>kmaps/kmaps.py</code> <pre><code>def add_shp(self, data, name = 'Shapefile', fit_bounds = True,  **kwargs):\n\"\"\"Add a ESRI shape file to the map.\n\n    Args:\n        data (str): A name of the shape file.\n        name (str, optional): A layer name of the shape file to be displayed on the map. Defaults to 'Shapefile'.\n    \"\"\"\n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n\n    # Access the geometry column\n    geometry = gdf.geometry\n\n    # Extract x and y coordinates\n    x_coords = geometry.x\n    y_coords = geometry.y\n\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name = name, **kwargs)\n\n    # [[south, west], [north, east]]\n    if fit_bounds:\n        bbox = [[min(y_coords), min(x_coords)], [max(y_coords), max(x_coords)]]\n        self.fit_bounds(bbox)\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.add_states_dropdown","title":"<code>add_states_dropdown(self, position='bottomright', **kwargs)</code>","text":"<p>Add a dropdown widget to move to selected state to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>Position of the widget. Defaults to 'bottomright'.</p> <code>'bottomright'</code> Source code in <code>kmaps/kmaps.py</code> <pre><code>def add_states_dropdown(self, position = 'bottomright', **kwargs):\n\"\"\"Add a dropdown widget to move to selected state to the map.\n\n    Args:\n        position (str, optional): Position of the widget. Defaults to 'bottomright'.\n    \"\"\"            \n    states_list = [('Initial Location', self.center), \n        ('Alabama', [32.78, -86.83]), ('Alaska', [64.07, -152.28]), \n        ('Arizona', [34.27, -111.66]), ('Arkansas', [34.89, -92.44]),\n        ('California', [37.18, -119.47]), ('Colorado', [39.00, -105.55]),\n        ('Connecticut', [41.62, -72.73]), ('Delaware', [38.99, -75.51]),\n        ('District of Columbia', [38.91, -77.01]), ('Florida', [28.63, -82.45]),\n        ('Georgia', [32.64, -83.44]), ('Hawaii', [20.29, -156.37]),\n        ('Idaho', [44.35, -114.61]), ('Illinois', [40.04, -89.20]),\n        ('Indiana', [39.89, -86.28]), ('Iowa', [42.08, -93.50]),\n        ('Kansas', [38.49, -98.38]), ('Kentucky', [37.53, -85.30]),\n        ('Louisiana', [31.07, -92.00]), ('Maine', [45.37, -69.24]),\n        ('Maryland', [39.06, -76.80]), ('Massachusetts', [42.26, -71.81]),\n        ('Michigan', [44.35, -85.41]), ('Minnesota', [46.28, -94.31]),\n        ('Mississippi', [32.74, -89.67]), \n        ('Montana', [47.05, -109.63]), ('Nebraska', [41.54, -99.80]),\n        ('Nevada', [39.33, -116.63]), ('New Hampshire', [43.68, -71.58]),\n        ('New Jersey', [40.19, -74.67]), ('New Mexico', [34.41, -106.11]),\n        ('New York', [42.95, -75.53]), ('North Carolina', [35.56, -79.39]),\n        ('North Dakota', [47.45, -100.47]), ('Ohio', [40.29, -82.79]),\n        ('Oklahoma', [35.59, -97.49]), ('Oregon', [43.93, -120.56]),\n        ('Pennsylvania', [40.88, -77.80]), ('Rhode Island', [41.68, -71.56]),\n        ('South Carolina', [33.92, -80.90]), ('South Dakota', [44.44, -100.23]),\n        ('Tennessee', [35.86, -86.35]), ('Texas', [31.48, -99.33]),\n        ('Utah', [39.31, -111.67]), ('Vermont', [44.07, -72.67]),\n        ('Virginia', [37.52, -78.85]), ('Washington', [47.38, -120.45]),\n        ('West Virginia', [38.64, -80.62]), ('Wisconsin', [44.62, -89.99]),\n        ('Wyoming', [43.00, -107.55])]\n    states_dropdown = widgets.Dropdown(\n        options = states_list,\n        value = self.center,\n        description = 'States',\n        style = {'description_width': 'initial'}\n    )\n\n    states_control = ipyleaflet.WidgetControl(widget = states_dropdown, position = position)\n    self.add(states_control)\n\n    widgets.link((self, 'center'), (states_dropdown, 'value'))\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Add a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>xyz url of the tile layer.</p> required <code>name</code> <code>str</code> <p>A name of the layer that would be displayed on the map.</p> required <code>attribution</code> <code>str</code> <p>A name of the attribution. Defaults to ''.</p> <code>''</code> Source code in <code>kmaps/kmaps.py</code> <pre><code>def add_tile_layer(self, url, name, attribution = '', **kwargs):\n\"\"\"Add a tile layer to the map.\n\n    Args:\n        url (str): xyz url of the tile layer.\n        name (str): A name of the layer that would be displayed on the map.\n        attribution (str, optional): A name of the attribution. Defaults to ''.\n    \"\"\"        \n    tile_layer = ipyleaflet.TileLayer(\n        url = url,\n        name = name,\n        attribution = attribution,\n        **kwargs\n    )\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.add_vector","title":"<code>add_vector(self, filename, layer_name='Vector data', **kwargs)</code>","text":"<p>Add a vector layer to the map</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the vector file.</p> required <code>layer_name</code> <code>str</code> <p>A layer name to be shown on the map. Defaults to 'Vector data'.</p> <code>'Vector data'</code> Source code in <code>kmaps/kmaps.py</code> <pre><code>def add_vector(\n    self,\n    filename,\n    layer_name = 'Vector data',\n    **kwargs,\n):\n\"\"\"Add a vector layer to the map\n\n    Args:\n        filename (str): The name of the vector file.\n        layer_name (str, optional): A layer name to be shown on the map. Defaults to 'Vector data'.\n    \"\"\"    \n    import os\n    if not filename.startswith('http'):\n        filename = os.path.abspath(filename)\n    else:\n        filename = github_raw_url(filename)\n    ext = os.path.splitext(filename)[1].lower()\n    if ext == '.shp':\n        self.add_shp(\n            filename,\n            layer_name\n        )\n    elif ext in ['.json', '.geojson']:\n        self.add_geojson(\n            filename,\n            layer_name\n        )\n    else:\n        geojson = vector_to_geojson(\n            filename,\n            bbox = bbox,\n            mask = mask,\n            rows = rows,\n            epsg = '4326',\n            **kwargs,\n        )\n\n        self.add_geojson(\n            geojson,\n            layer_name\n        )\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.to_html","title":"<code>to_html(self, outfile=None, title='My Map', width='100%', height='880px', **kwargs)</code>","text":"<p>Saves the map as an HTML file.</p> <p>Parameters:</p> Name Type Description Default <code>outfile</code> <code>str</code> <p>The output file path to the HTML file.</p> <code>None</code> <code>title</code> <code>str</code> <p>The title of the HTML file. Defaults to 'My Map'.</p> <code>'My Map'</code> <code>width</code> <code>str</code> <p>The width of the map in pixels or percentage. Defaults to '100%'.</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>The height of the map in pixels. Defaults to '880px'.</p> <code>'880px'</code> <code>add_layer_control</code> <code>bool</code> <p>Whether to add the LayersControl. Defaults to True.</p> required Source code in <code>kmaps/kmaps.py</code> <pre><code>def to_html(\n    self,\n    outfile=None,\n    title=\"My Map\",\n    width=\"100%\",\n    height=\"880px\",\n    **kwargs,\n):\n    ####### just copied from leafmap\n\"\"\"Saves the map as an HTML file.\n    Args:\n        outfile (str, optional): The output file path to the HTML file.\n        title (str, optional): The title of the HTML file. Defaults to 'My Map'.\n        width (str, optional): The width of the map in pixels or percentage. Defaults to '100%'.\n        height (str, optional): The height of the map in pixels. Defaults to '880px'.\n        add_layer_control (bool, optional): Whether to add the LayersControl. Defaults to True.\n    \"\"\"\n    try:\n        save = True\n        if outfile is not None:\n            if not outfile.endswith(\".html\"):\n                raise ValueError(\"The output file extension must be html.\")\n            outfile = os.path.abspath(outfile)\n            out_dir = os.path.dirname(outfile)\n            if not os.path.exists(out_dir):\n                os.makedirs(out_dir)\n        else:\n            outfile = os.path.abspath(generate_random_string(3) + \".html\")\n            save = False\n\n'''\n        if add_layer_control and self.layer_control is None:\n            layer_control = ipyleaflet.LayersControl(position=\"topright\")\n            self.layer_control = layer_control\n            self.add(layer_control)\n        '''\n\n        before_width = self.layout.width\n        before_height = self.layout.height\n\n        if not isinstance(width, str):\n            print(\"width must be a string.\")\n            return\n        elif width.endswith(\"px\") or width.endswith(\"%\"):\n            pass\n        else:\n            print(\"width must end with px or %\")\n            return\n\n        if not isinstance(height, str):\n            print(\"height must be a string.\")\n            return\n        elif not height.endswith(\"px\"):\n            print(\"height must end with px\")\n            return\n\n        self.layout.width = width\n        self.layout.height = height\n\n        self.save(outfile, title=title, **kwargs)\n\n        self.layout.width = before_width\n        self.layout.height = before_height\n\n        if not save:\n            out_html = \"\"\n            with open(outfile) as f:\n                lines = f.readlines()\n                out_html = \"\".join(lines)\n            os.remove(outfile)\n            return out_html\n\n    except Exception as e:\n        raise Exception(e)\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.Map.to_streamlit","title":"<code>to_streamlit(self, width=None, height=600, scrolling=False, **kwargs)</code>","text":"<p>Renders map figure in a Streamlit app.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Width of the map. Defaults to None.</p> <code>None</code> <code>height</code> <code>int</code> <p>Height of the map. Defaults to 600.</p> <code>600</code> <code>responsive</code> <code>bool</code> <p>Whether to make the map responsive. Defaults to True.</p> required <code>scrolling</code> <code>bool</code> <p>If True, show a scrollbar when the content is larger than the iframe. Otherwise, do not show a scrollbar. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>streamlit.components</code> <p>components.html object.</p> Source code in <code>kmaps/kmaps.py</code> <pre><code>def to_streamlit(self, width=None, height=600, scrolling=False, **kwargs):\n    ####### just copied from leafmap\n\"\"\"Renders map figure in a Streamlit app.\n    Args:\n        width (int, optional): Width of the map. Defaults to None.\n        height (int, optional): Height of the map. Defaults to 600.\n        responsive (bool, optional): Whether to make the map responsive. Defaults to True.\n        scrolling (bool, optional): If True, show a scrollbar when the content is larger than the iframe. Otherwise, do not show a scrollbar. Defaults to False.\n    Returns:\n        streamlit.components: components.html object.\n    \"\"\"\n\n    try:\n        import streamlit.components.v1 as components\n\n        # if responsive:\n        #     make_map_responsive = \"\"\"\n        #     &lt;style&gt;\n        #     [title~=\"st.iframe\"] { width: 100%}\n        #     &lt;/style&gt;\n        #     \"\"\"\n        #     st.markdown(make_map_responsive, unsafe_allow_html=True)\n        return components.html(\n            self.to_html(), width=width, height=height, scrolling=scrolling\n        )\n\n    except Exception as e:\n        raise Exception(e)\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.csv_to_geojson","title":"<code>csv_to_geojson(in_csv, out_geojson, x='longitude', y='latitude', attribute=None)</code>","text":"<p>Convert csv that contains longitude and latitude columns to a geojson file.</p> <p>Parameters:</p> Name Type Description Default <code>in_csv</code> <code>str</code> <p>csv file name</p> required <code>out_geojson</code> <code>str</code> <p>name of output file</p> required <code>x</code> <code>str</code> <p>The column name that contains X coordinates. Defaults to \"longitude\".</p> <code>'longitude'</code> <code>y</code> <code>str</code> <p>The column name that contains Y coordinates. Defaults to \"latitude\".</p> <code>'latitude'</code> <code>attribute</code> <code>str</code> <p>The column name that contains attribute. Defaults to None.</p> <code>None</code> Source code in <code>kmaps/kmaps.py</code> <pre><code>def csv_to_geojson(in_csv, out_geojson, x=\"longitude\", y=\"latitude\", attribute = None):\n\"\"\"Convert csv that contains longitude and latitude columns to a geojson file.\n\n    Args:\n        in_csv (str): csv file name\n        out_geojson (str): name of output file\n        x (str, optional): The column name that contains X coordinates. Defaults to \"longitude\".\n        y (str, optional): The column name that contains Y coordinates. Defaults to \"latitude\".\n        attribute (str, optional): The column name that contains attribute. Defaults to None.\n    \"\"\"  \n    df = pd.read_csv(in_csv)\n\n    Xls = df[x]\n    Yls = df[y]\n    if attribute != None:\n        att_ls = df[attribute]\n        df_dict = {'Attribute': att_ls, 'XCoord': Xls, 'YCoord': Yls}\n        gdf = gpd.GeoDataFrame(pd.DataFrame(df_dict), geometry = gpd.points_from_xy(Xls, Yls))\n    else:\n        gdf = gpd.GeoDataFrame(geometry = gpd.points_from_xy(Xls, Yls))\n    geojson = gdf.__geo_interface__\n    gdf.to_file(out_geojson)\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.csv_to_shp","title":"<code>csv_to_shp(in_csv, out_shp, x='longitude', y='latitude', attribute=None)</code>","text":"<p>Convert csv that contains longitude and latitude columns to a shapefile.</p> <p>Parameters:</p> Name Type Description Default <code>in_csv</code> <code>str</code> <p>csv file name</p> required <code>out_shp</code> <code>str</code> <p>name of output file</p> required <code>x</code> <code>str</code> <p>The column name that contains X coordinates. Defaults to \"longitude\".</p> <code>'longitude'</code> <code>y</code> <code>str</code> <p>The column name that contains Y coordinates. Defaults to \"latitude\".</p> <code>'latitude'</code> <code>attribute</code> <code>str</code> <p>The column name that contains attribute. Defaults to None.</p> <code>None</code> Source code in <code>kmaps/kmaps.py</code> <pre><code>def csv_to_shp(in_csv, out_shp, x=\"longitude\", y=\"latitude\", attribute = None):\n\"\"\"Convert csv that contains longitude and latitude columns to a shapefile.\n\n    Args:\n        in_csv (str): csv file name\n        out_shp (str): name of output file\n        x (str, optional): The column name that contains X coordinates. Defaults to \"longitude\".\n        y (str, optional): The column name that contains Y coordinates. Defaults to \"latitude\".\n        attribute (str, optional): The column name that contains attribute. Defaults to None.\n    \"\"\"    \n    df = pd.read_csv(in_csv)\n\n    Xls = df[x]\n    Yls = df[y]\n    if attribute != None:\n        att_ls = df[attribute]\n        df_dict = {'Attribute': att_ls, 'XCoord': Xls, 'YCoord': Yls}\n        gdf = gpd.GeoDataFrame(pd.DataFrame(df_dict), geometry = gpd.points_from_xy(Xls, Yls))\n    else:\n        gdf = gpd.GeoDataFrame(geometry = gpd.points_from_xy(Xls, Yls))\n    gdf.to_file(out_shp)\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.distance_matrix","title":"<code>distance_matrix(df)</code>","text":"<p>Create an Euclidean distance matrix from a point shapefile.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>GeoDataFrame</code> <p>Input GDF file.</p> required <p>Returns:</p> Type Description <code>numpy array</code> <p>Created distance matrix.</p> Source code in <code>kmaps/kmaps.py</code> <pre><code>def distance_matrix(df):\n\"\"\"Create an Euclidean distance matrix from a point shapefile.\n\n    Args:\n        df (GeoDataFrame): Input GDF file.\n\n    Returns:\n        numpy array: Created distance matrix.\n    \"\"\"\n    import numpy as np\n    mat = []\n    for i in list(df.index):\n        temp_ls = list(df['geometry'].distance(df['geometry'][i]))\n        mat.append(temp_ls)\n    mat = np.array(mat)\n    mat = mat\n\n    return mat\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.euclidean_dist","title":"<code>euclidean_dist(first_coord, second_coord)</code>","text":"<p>Calculates an Euclidean distance between two coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>first_coord</code> <code>list</code> <p>A coordinate of the first point. Should have 2 length. </p> required <code>second_coord</code> <code>list</code> <p>A coordinate of the second point. Should have 2 length. </p> required <p>Returns:</p> Type Description <code>int</code> <p>Calculated Euclidean distance.</p> Source code in <code>kmaps/kmaps.py</code> <pre><code>def euclidean_dist(first_coord, second_coord):\n\"\"\"Calculates an Euclidean distance between two coordinates.\n\n    Args:\n        first_coord (list): A coordinate of the first point. Should have 2 length. \n        second_coord (list): A coordinate of the second point. Should have 2 length. \n\n    Returns:\n        int: Calculated Euclidean distance.\n    \"\"\"\n    import math\n    for coord in [first_coord, second_coord]:\n        if not isinstance(coord, (list, tuple)) or len(coord) != 2:\n            raise ValueError('The coordinates must be lists or tuples of length 2.')\n        for element in coord:\n            if not isinstance(element, (int, float)):\n                raise ValueError('The elements of the coordinates must be integers or floats.')\n\n    x_diff = first_coord[0] - second_coord[0]\n    y_diff = first_coord[1] - second_coord[1]\n    dist = math.sqrt(x_diff ** 2 + y_diff ** 2)\n    return dist\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.generate_lucky_number","title":"<code>generate_lucky_number(length=2)</code>","text":"<p>Generates a random number of a given length.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>A length of the number. Defaults to 2.</p> <code>2</code> <p>Returns:</p> Type Description <code>int</code> <p>Generated random number.</p> Source code in <code>kmaps/kmaps.py</code> <pre><code>def generate_lucky_number(length = 2):\n\"\"\"Generates a random number of a given length.\n\n    Args:\n        length (int, optional): A length of the number. Defaults to 2.\n\n    Returns:\n        int: Generated random number.\n    \"\"\"    \n    result_str = ''.join(random.choice(string.digits) for i in range(length))\n    result_str = int(result_str)\n    return result_str\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.generate_random_string","title":"<code>generate_random_string(length, upper=False, digit=False, punc=False)</code>","text":"<p>Generates a random string of a given length.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>A length of the string.</p> required <code>upper</code> <code>bool</code> <p>Whether you would like to contain upper case alphabets in your string pool or not. Defaults to False.</p> <code>False</code> <code>digit</code> <code>bool</code> <p>Whether you would like to contain digits in your string pool or not. Defaults to False.</p> <code>False</code> <code>punc</code> <code>bool</code> <p>Whether you would like to contain punctuations in your string pool or not. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Generated random string.</p> Source code in <code>kmaps/kmaps.py</code> <pre><code>def generate_random_string(length, upper = False, digit = False, punc = False):\n\"\"\"Generates a random string of a given length.\n\n    Args:\n        length (int): A length of the string.\n        upper (bool, optional): Whether you would like to contain upper case alphabets in your string pool or not. Defaults to False.\n        digit (bool, optional): Whether you would like to contain digits in your string pool or not. Defaults to False.\n        punc (bool, optional): Whether you would like to contain punctuations in your string pool or not. Defaults to False.\n\n    Returns:\n        str: Generated random string.\n    \"\"\"\n    chars = string.ascii_lowercase\n    if upper:\n        chars += string.ascii_uppercase\n    if digit:\n        chars += string.digits\n    if punc:\n        chars += string.punctuation\n\n    result_str = ''.join(random.choice(chars) for i in range(length))\n    return result_str\n</code></pre>"},{"location":"kmaps/#kmaps.kmaps.weber","title":"<code>weber(gdf, attribute)</code>","text":"<p>Solve the single-facility Weber problem using a gradient descent algorithm.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame</code> <p>Input GDF file.</p> required <code>attribute</code> <code>str</code> <p>Column name that contains the weight.</p> required <p>Returns:</p> Type Description <code>GeoDataFrame</code> <p>Result of the Weber problem.</p> Source code in <code>kmaps/kmaps.py</code> <pre><code>def weber(gdf, attribute):\n\"\"\"Solve the single-facility Weber problem using a gradient descent algorithm.\n\n    Args:\n        gdf (GeoDataFrame): Input GDF file.\n        attribute (str): Column name that contains the weight.\n    Returns:\n        GeoDataFrame: Result of the Weber problem.\n    \"\"\"    \n    import geopandas as gpd\n    import pandas as pd\n    import numpy as np\n\n    geometry = gdf.geometry\n    x_coords = geometry.x\n    y_coords = geometry.y\n\n    w = np.array(gdf[attribute])\n    xi = np.array(x_coords)\n    yi = np.array(y_coords)\n\n    # gradient descent for each decision var.s\n    def gradX(X, Y, Z, w, xi, yi):\n        gradXls = []\n        for j in range(0, len(Z)):\n            gradXj = 0\n            for i in range(0, len(w)):\n                gradXj = gradXj + Z[j][i] * w[i] * (X[j] - xi[i]) / (np.sqrt(np.power(xi[i] - X[j], 2) + np.power(yi[i] - Y[j], 2)))\n            gradXls.append(gradXj)\n        gradXj = 0\n        for i in range(0, len(w)):\n            gradXj = gradXj + w[i] * (X[-1] - xi[i]) / (np.sqrt(np.power(xi[i] - X[-1], 2) + np.power(yi[i] - Y[-1], 2)))\n            for j in range(0, len(Z)):\n                gradXj = gradXj - Z[j][i] * w[i] * (X[-1] - xi[i]) / (np.sqrt(np.power(xi[i] - X[-1], 2) + np.power(yi[i] - Y[-1], 2)))\n        gradXls.append(gradXj)\n        return np.array(gradXls)\n\n    def gradY(X, Y, Z, w, xi, yi):\n        gradYls = []\n        for j in range(0, len(Z)):\n            gradYj = 0\n            for i in range(0, len(w)):\n                gradYj = gradYj + Z[j][i] * w[i] * (Y[j] - yi[i]) / (np.sqrt(np.power(xi[i] - X[j], 2) + np.power(yi[i] - Y[j], 2)))\n            gradYls.append(gradYj)\n        gradYj = 0\n        for i in range(0, len(w)):\n            gradYj = gradYj + w[i] * (Y[-1] - yi[i]) / (np.sqrt(np.power(xi[i] - X[-1], 2) + np.power(yi[i] - Y[-1], 2)))\n            for j in range(0, len(Z)):\n                gradYj = gradYj - Z[j][i] * w[i] * (Y[-1] - yi[i]) / (np.sqrt(np.power(xi[i] - X[-1], 2) + np.power(yi[i] - Y[-1], 2)))\n        gradYls.append(gradYj)\n        return np.array(gradYls)\n\n    def gradZ(X, Y, Z, w, xi, yi):\n        gradZls = []\n        for j in range(0, len(Z)):\n            gradZtemp = []\n            for i in range(0, len(w)):\n                gradZi = w[i] * (np.sqrt(np.power(xi[i] - X[j], 2) + np.power(yi[i] - Y[j], 2))) - w[i] * (np.sqrt(np.power(xi[i] - X[-1], 2) + np.power(yi[i] - Y[-1], 2)))\n                gradZtemp.append(gradZi)\n            gradZls.append(gradZtemp)\n        return np.array(gradZls)\n\n    # define objective function for the GD\n    def obj(X, Y, Z, w, xi, yi):\n        objective = 0\n        for i in range(0, len(w)):\n            for j in range(0, len(Z)):\n                objective = objective + Z[j][i] * w[i] * (np.sqrt(np.power(xi[i] - X[j], 2) + np.power(yi[i] - Y[j], 2)))\n                objective = objective - Z[j][i] * w[i] * (np.sqrt(np.power(xi[i] - X[-1], 2) + np.power(yi[i] - Y[-1], 2)))\n            objective = objective + w[i] * (np.sqrt(np.power(xi[i] - X[-1], 2) + np.power(yi[i] - Y[-1], 2)))\n        return objective\n\n    # initial variables\n    Xg = np.array([sum(xi) / len(xi)])\n    Yg = np.array([sum(yi) / len(yi)])\n    Zg = []\n    for j in range(0, 0):\n        Zg.append(np.array([0.5] * len(w)))\n    Zg = np.array(Zg)\n\n    # gradient descent\n    max_iter = 500\n    step_size = 0.000001\n    obj_val_ls = []\n\n    for t in range(max_iter):\n        obj_val = obj(Xg, Yg, Zg, w, xi, yi)\n        obj_val_ls.append(obj_val)\n\n        Xg = Xg - step_size * gradX(Xg, Yg, Zg, w, xi, yi)\n        Yg = Yg - step_size * gradY(Xg, Yg, Zg, w, xi, yi)\n\n    r = gpd.GeoDataFrame(geometry = gpd.points_from_xy(x = Xg, y = Yg))\n    r['ObjVal'] = obj_val\n\n    return r\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use kmaps in a project:</p> <pre><code>import kmaps\n</code></pre>"},{"location":"examples/00_introduction/","title":"Introduction","text":"In\u00a0[4]: Copied! <pre>import kmaps\nimport ipyleaflet\nimport geopandas as gpd\n</pre> import kmaps import ipyleaflet import geopandas as gpd <p>Default setting of a class Map is:</p> <p><code>center = [37.5, 127]</code></p> <p><code>zoom = 8</code></p> In\u00a0[2]: Copied! <pre>m = kmaps.Map(center = [37, 127], zoom = 7)\nm\n</pre> m = kmaps.Map(center = [37, 127], zoom = 7) m <pre>Map(center=[37, 127], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_te\u2026</pre> In\u00a0[3]: Copied! <pre>m.add_shp('data/BuildingsCentroids_OSM_UTK.shp')\n</pre> m.add_shp('data/BuildingsCentroids_OSM_UTK.shp') In\u00a0[5]: Copied! <pre>df = gpd.read_file('data/BuildingsCentroids_OSM_UTK.shp')\n</pre> df = gpd.read_file('data/BuildingsCentroids_OSM_UTK.shp') In\u00a0[6]: Copied! <pre>df[0:5]\n</pre> df[0:5] Out[6]: osm_id name type building other_tags AREA_GEO geometry 0 1637098 Neyland Stadium multipolygon yes \"addr:city\"=&gt;\"Knoxville\",\"addr:housenumber\"=&gt;\"... 32781.092686 POINT (-83.92569 35.95466) 1 12930066 Humanities and Social Sciences multipolygon university NaN 2533.504774 POINT (-83.92902 35.95367) 2 15020855 McClung Tower multipolygon yes \"layer\"=&gt;\"1\" 701.942535 POINT (-83.92897 35.95408) 3 NaN University Printing &amp; Mail NaN university NaN 4935.101437 POINT (-83.92825 35.94675) 4 NaN UT Warehouse NaN university NaN 2203.751396 POINT (-83.92908 35.94662) In\u00a0[3]: Copied! <pre>m.add_basemap('roadmap')\n</pre> m.add_basemap('roadmap') In\u00a0[4]: Copied! <pre>m.add_draw_control()\n</pre> m.add_draw_control() In\u00a0[5]: Copied! <pre>m.add_geojson('data/sample.geojson')\n</pre> m.add_geojson('data/sample.geojson') In\u00a0[7]: Copied! <pre>m.add_layers_control()\n</pre> m.add_layers_control() In\u00a0[7]: Copied! <pre>m.add_search_control()\n</pre> m.add_search_control() In\u00a0[3]: Copied! <pre>m.add_vector('data/sample.geojson')\n</pre> m.add_vector('data/sample.geojson') In\u00a0[9]: Copied! <pre>url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\nm.add_tile_layer(url = url, name = 'Google Satellite', attribution = 'Google')\n</pre> url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}' m.add_tile_layer(url = url, name = 'Google Satellite', attribution = 'Google') In\u00a0[10]: Copied! <pre>dist = kmaps.euclidean_dist([0, 0], [1, 1])\ndist\n</pre> dist = kmaps.euclidean_dist([0, 0], [1, 1]) dist Out[10]: <pre>1.4142135623730951</pre> In\u00a0[8]: Copied! <pre>kmaps.generate_random_string(2)\n</pre> kmaps.generate_random_string(2) Out[8]: <pre>'bs'</pre>"},{"location":"examples/01_folmaps/","title":"Folmaps","text":"In\u00a0[30]: Copied! <pre>import folium\n#import kmaps\n#from kmaps import folmaps\nimport kmaps.folmaps as kmaps\n</pre> import folium #import kmaps #from kmaps import folmaps import kmaps.folmaps as kmaps In\u00a0[37]: Copied! <pre>m = kmaps.Map(location = [36, -84])\n</pre> m = kmaps.Map(location = [36, -84]) In\u00a0[36]: Copied! <pre>url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\nm.add_tile_layer(url = url, name = 'Satellite', attr = 'Google')\nm.add_layer_control()\nm\n</pre> url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}' m.add_tile_layer(url = url, name = 'Satellite', attr = 'Google') m.add_layer_control() m Out[36]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[33]: Copied! <pre>m.add_geojson('data/sample.geojson')\nm.add_shp('data/Census2020_County_TN.shp')\n\nm.add_layer_control()\nm\n</pre> m.add_geojson('data/sample.geojson') m.add_shp('data/Census2020_County_TN.shp')  m.add_layer_control() m Out[33]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[38]: Copied! <pre>m.add_basemap()\nm.add_layer_control()\nm\n</pre> m.add_basemap() m.add_layer_control() m Out[38]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/02_raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>import kmaps\n</pre> import kmaps In\u00a0[17]: Copied! <pre>m = kmaps.Map()\nm\n</pre> m = kmaps.Map() m <pre>Map(center=[37.5, 127], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_\u2026</pre> In\u00a0[18]: Copied! <pre># raw url\nurl = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n</pre> # raw url url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" In\u00a0[19]: Copied! <pre>m.add_raster(url)\n</pre> m.add_raster(url) In\u00a0[8]: Copied! <pre>from ipyleaflet import WidgetControl\nimport ipywidgets as widgets\n</pre> from ipyleaflet import WidgetControl import ipywidgets as widgets In\u00a0[20]: Copied! <pre>slider = widgets.FloatSlider(value = 0.5, min = 0, max = 1, step = 0.01, description = 'Layer')\nslider\n</pre> slider = widgets.FloatSlider(value = 0.5, min = 0, max = 1, step = 0.01, description = 'Layer') slider <pre>FloatSlider(value=0.5, description='Layer', max=1.0, step=0.01)</pre> In\u00a0[21]: Copied! <pre>widgets.jsdlink((slider, 'value'), (m.layers[-1], 'opacity')) # link between a widget and a layer on the map\n</pre> widgets.jsdlink((slider, 'value'), (m.layers[-1], 'opacity')) # link between a widget and a layer on the map  <pre>DirectionalLink(source=(FloatSlider(value=0.5, description='Layer', max=1.0, step=0.01), 'value'), target=(Til\u2026</pre> In\u00a0[22]: Copied! <pre>control = WidgetControl(widget = slider, position = 'bottomright')\n</pre> control = WidgetControl(widget = slider, position = 'bottomright') In\u00a0[23]: Copied! <pre>m.add(control)\n</pre> m.add(control) <pre>Map(bottom=146454.0, center=[-20.403673802342773, 57.75213430160109], controls=(ZoomControl(options=['position\u2026</pre>"},{"location":"examples/03_image/","title":"Image","text":"In\u00a0[6]: Copied! <pre>import kmaps\n</pre> import kmaps In\u00a0[7]: Copied! <pre>m = kmaps.Map()\nm\n</pre> m = kmaps.Map() m <pre>Map(center=[37.5, 127], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_\u2026</pre> In\u00a0[8]: Copied! <pre>url = 'https://geography.utk.edu/wp-content/uploads/2022/09/grad_group_photo_fa22_crop-1536x916.jpg'\n</pre> url = 'https://geography.utk.edu/wp-content/uploads/2022/09/grad_group_photo_fa22_crop-1536x916.jpg' In\u00a0[9]: Copied! <pre>m.add_image(url, 200, 120, 'bottomright')\n</pre> m.add_image(url, 200, 120, 'bottomright') In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/04_dropdown/","title":"Dropdown","text":"In\u00a0[1]: Copied! <pre>import kmaps\nimport ipyleaflet\n</pre> import kmaps import ipyleaflet In\u00a0[2]: Copied! <pre>m = kmaps.Map(center = [37, 127], zoom = 7)\nm\n</pre> m = kmaps.Map(center = [37, 127], zoom = 7) m <pre>Map(center=[37, 127], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_te\u2026</pre> In\u00a0[3]: Copied! <pre>m.add_base_dropdown()\n</pre> m.add_base_dropdown() In\u00a0[4]: Copied! <pre>m.add_states_dropdown()\n</pre> m.add_states_dropdown()"},{"location":"examples/05_optimization/","title":"Optimization","text":"In\u00a0[\u00a0]: Copied! <pre>import kmaps\nimport geopandas as gpd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n</pre> import kmaps import geopandas as gpd import numpy as np  import matplotlib.pyplot as plt In\u00a0[\u00a0]: Copied! <pre>m = kmaps.Map(center = [36, -84])\nm\n</pre> m = kmaps.Map(center = [36, -84]) m In\u00a0[\u00a0]: Copied! <pre>df = gpd.read_file('data/BuildingsCentroids_OSM_UTK.shp')\n</pre> df = gpd.read_file('data/BuildingsCentroids_OSM_UTK.shp') In\u00a0[\u00a0]: Copied! <pre>m.add_cmark(location = (36, -84))\n</pre> m.add_cmark(location = (36, -84)) In\u00a0[\u00a0]: Copied! <pre>m.add_shp('data/BuildingsCentroids_OSM_UTK.shp')\n</pre> m.add_shp('data/BuildingsCentroids_OSM_UTK.shp') In\u00a0[\u00a0]: Copied! <pre>m.add_Weber('data/BuildingsCentroids_OSM_UTK.shp', 'w')\n</pre> m.add_Weber('data/BuildingsCentroids_OSM_UTK.shp', 'w') In\u00a0[\u00a0]: Copied! <pre>dist = kmaps.euclidean_dist([0, 0], [1, 1])\ndist\n</pre> dist = kmaps.euclidean_dist([0, 0], [1, 1]) dist In\u00a0[\u00a0]: Copied! <pre>dist_mat = kmaps.distance_matrix(df)\ndist_mat\n</pre> dist_mat = kmaps.distance_matrix(df) dist_mat"},{"location":"examples/10_final_exam/","title":"FinalExam","text":"In\u00a0[1]: Copied! <pre>import kmaps\nimport pandas as pd\nimport geopandas as gpd\n</pre> import kmaps import pandas as pd import geopandas as gpd In\u00a0[2]: Copied! <pre>df = pd.read_csv('data/world_cities.csv')\n</pre> df = pd.read_csv('data/world_cities.csv') In\u00a0[3]: Copied! <pre>df[0:2]\n</pre> df[0:2] Out[3]: name sov_a3 latitude longitude pop_max 0 Bombo UGA 0.5833 32.5333 75000 1 Fort Portal UGA 0.6710 30.2750 42670 In\u00a0[4]: Copied! <pre># Q1 shapefile\nkmaps.csv_to_shp('data/world_cities.csv', 'data/world_cities.shp', attribute = 'name')\n</pre> # Q1 shapefile kmaps.csv_to_shp('data/world_cities.csv', 'data/world_cities.shp', attribute = 'name') In\u00a0[5]: Copied! <pre># Q1 geojson\nkmaps.csv_to_geojson('data/world_cities.csv', 'data/world_cities.geojson')\n</pre> # Q1 geojson kmaps.csv_to_geojson('data/world_cities.csv', 'data/world_cities.geojson') In\u00a0[6]: Copied! <pre>df1 = gpd.read_file('data/world_cities.shp')\n</pre> df1 = gpd.read_file('data/world_cities.shp') In\u00a0[7]: Copied! <pre>df2 = gpd.read_file('data/world_cities.geojson')\n</pre> df2 = gpd.read_file('data/world_cities.geojson') In\u00a0[2]: Copied! <pre>m = kmaps.Map()\nm\n</pre> m = kmaps.Map() m <pre>Map(center=[37.5, 127], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_\u2026</pre> In\u00a0[3]: Copied! <pre># Q2\nm.add_points_from_csv('data/world_cities.csv')\n</pre> # Q2 m.add_points_from_csv('data/world_cities.csv') In\u00a0[4]: Copied! <pre># Q3\nm.add_select_mc()\n</pre> # Q3 m.add_select_mc() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/","title":"Working With COG","text":"In\u00a0[\u00a0]: Copied! <pre># Uncomment this line if you need to install the dependencies\n# !pip install folium httpx\n</pre> # Uncomment this line if you need to install the dependencies # !pip install folium httpx In\u00a0[1]: Copied! <pre>import json\n\nimport httpx\n\nfrom folium import Map, TileLayer\n\n%matplotlib inline\n</pre> import json  import httpx  from folium import Map, TileLayer  %matplotlib inline In\u00a0[2]: Copied! <pre>titiler_endpoint = \"https://titiler.xyz\"  # Developmentseed Demo endpoint. Please be kind.\nurl = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n</pre> titiler_endpoint = \"https://titiler.xyz\"  # Developmentseed Demo endpoint. Please be kind. url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" In\u00a0[3]: Copied! <pre># Fetch File Metadata to get min/max rescaling values (because the file is stored as float32)\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/info\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nbounds = r[\"bounds\"]\nprint(r)\n</pre> # Fetch File Metadata to get min/max rescaling values (because the file is stored as float32) r = httpx.get(     f\"{titiler_endpoint}/cog/info\",     params = {         \"url\": url,     } ).json()  bounds = r[\"bounds\"] print(r) <pre>{'bounds': [57.664053823239804, -20.55473177712791, 57.84021477996238, -20.25261582755764], 'minzoom': 10, 'maxzoom': 18, 'band_metadata': [['b1', {}], ['b2', {}], ['b3', {}]], 'band_descriptions': [['b1', ''], ['b2', ''], ['b3', '']], 'dtype': 'uint8', 'nodata_type': 'Mask', 'colorinterp': ['red', 'green', 'blue'], 'width': 38628, 'count': 3, 'driver': 'GTiff', 'overviews': [2, 4, 8, 16, 32, 64, 128], 'height': 66247}\n</pre> In\u00a0[4]: Copied! <pre># Fetch File Metadata to get min/max rescaling values (because the file is stored as float32)\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/statistics\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nprint(json.dumps(r, indent=4))\n</pre> # Fetch File Metadata to get min/max rescaling values (because the file is stored as float32) r = httpx.get(     f\"{titiler_endpoint}/cog/statistics\",     params = {         \"url\": url,     } ).json()  print(json.dumps(r, indent=4)) <pre>{\n    \"b1\": {\n        \"min\": 0.0,\n        \"max\": 255.0,\n        \"mean\": 36.94901407469342,\n        \"count\": 574080.0,\n        \"sum\": 21211690.0,\n        \"std\": 48.282133573955264,\n        \"median\": 3.0,\n        \"majority\": 1.0,\n        \"minority\": 246.0,\n        \"unique\": 256.0,\n        \"histogram\": [\n            [\n                330584.0,\n                54820.0,\n                67683.0,\n                57434.0,\n                30305.0,\n                14648.0,\n                9606.0,\n                5653.0,\n                2296.0,\n                1051.0\n            ],\n            [\n                0.0,\n                25.5,\n                51.0,\n                76.5,\n                102.0,\n                127.5,\n                153.0,\n                178.5,\n                204.0,\n                229.5,\n                255.0\n            ]\n        ],\n        \"valid_percent\": 93.75,\n        \"masked_pixels\": 38272.0,\n        \"valid_pixels\": 574080.0,\n        \"percentile_98\": 171.0,\n        \"percentile_2\": 0.0\n    },\n    \"b2\": {\n        \"min\": 0.0,\n        \"max\": 255.0,\n        \"mean\": 57.1494356187291,\n        \"count\": 574080.0,\n        \"sum\": 32808348.0,\n        \"std\": 56.300819175100656,\n        \"median\": 37.0,\n        \"majority\": 5.0,\n        \"minority\": 0.0,\n        \"unique\": 256.0,\n        \"histogram\": [\n            [\n                271018.0,\n                34938.0,\n                54030.0,\n                69429.0,\n                70260.0,\n                32107.0,\n                29375.0,\n                9697.0,\n                2001.0,\n                1225.0\n            ],\n            [\n                0.0,\n                25.5,\n                51.0,\n                76.5,\n                102.0,\n                127.5,\n                153.0,\n                178.5,\n                204.0,\n                229.5,\n                255.0\n            ]\n        ],\n        \"valid_percent\": 93.75,\n        \"masked_pixels\": 38272.0,\n        \"valid_pixels\": 574080.0,\n        \"percentile_98\": 180.0,\n        \"percentile_2\": 5.0\n    },\n    \"b3\": {\n        \"min\": 0.0,\n        \"max\": 255.0,\n        \"mean\": 51.251764562430324,\n        \"count\": 574080.0,\n        \"sum\": 29422613.0,\n        \"std\": 39.65505035854822,\n        \"median\": 36.0,\n        \"majority\": 16.0,\n        \"minority\": 252.0,\n        \"unique\": 254.0,\n        \"histogram\": [\n            [\n                203263.0,\n                150865.0,\n                104882.0,\n                42645.0,\n                30652.0,\n                25382.0,\n                12434.0,\n                2397.0,\n                1097.0,\n                463.0\n            ],\n            [\n                0.0,\n                25.5,\n                51.0,\n                76.5,\n                102.0,\n                127.5,\n                153.0,\n                178.5,\n                204.0,\n                229.5,\n                255.0\n            ]\n        ],\n        \"valid_percent\": 93.75,\n        \"masked_pixels\": 38272.0,\n        \"valid_pixels\": 574080.0,\n        \"percentile_98\": 158.0,\n        \"percentile_2\": 14.0\n    }\n}\n</pre> In\u00a0[5]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=13\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"DigitalGlobe OpenData\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,     } ).json()  m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=13 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"DigitalGlobe OpenData\" ) aod_layer.add_to(m) m Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[17]: Copied! <pre>r\n</pre> r Out[17]: <pre>{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://titiler.xyz/cog/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?url=https%3A%2F%2Fopendata.digitalglobe.com%2Fevents%2Fmauritius-oil-spill%2Fpost-event%2F2020-08-12%2F105001001F1B5B00%2F105001001F1B5B00.tif'],\n 'minzoom': 10,\n 'maxzoom': 18,\n 'bounds': [57.664053823239804,\n  -20.55473177712791,\n  57.84021477996238,\n  -20.25261582755764],\n 'center': [57.75213430160109, -20.403673802342773, 10]}</pre> In\u00a0[6]: Copied! <pre>import kmaps\n</pre> import kmaps In\u00a0[22]: Copied! <pre>m = kmaps.Map()\nm\n</pre> m = kmaps.Map() m <pre>Map(center=[37.5, 127], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_\u2026</pre> In\u00a0[23]: Copied! <pre>url = r['tiles'][0]\nurl\n</pre> url = r['tiles'][0] url Out[23]: <pre>'https://titiler.xyz/cog/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?url=https%3A%2F%2Fopendata.digitalglobe.com%2Fevents%2Fmauritius-oil-spill%2Fpost-event%2F2020-08-12%2F105001001F1B5B00%2F105001001F1B5B00.tif'</pre> In\u00a0[24]: Copied! <pre>m.add_tile_layer(url, name = 'COG')\n</pre> m.add_tile_layer(url, name = 'COG') In\u00a0[25]: Copied! <pre>bounds\n</pre> bounds Out[25]: <pre>[57.664053823239804, -20.55473177712791, 57.84021477996238, -20.25261582755764]</pre> In\u00a0[26]: Copied! <pre>bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\nbbox\n</pre> bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]] bbox Out[26]: <pre>[[-20.55473177712791, 57.664053823239804],\n [-20.25261582755764, 57.84021477996238]]</pre> In\u00a0[27]: Copied! <pre>m.fit_bounds(bbox)\n</pre> m.fit_bounds(bbox) In\u00a0[\u00a0]: Copied! <pre>url = \"https://data.geo.admin.ch/ch.swisstopo.swissalti3d/swissalti3d_2019_2573-1085/swissalti3d_2019_2573-1085_0.5_2056_5728.tif\"\n\n# Fetch File Metadata to get min/max rescaling values (because the file is stored as float32)\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/info\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nprint(r)\nprint(\"Data is of type:\", r[\"dtype\"])\n\n# This dataset has statistics metadata\nminv, maxv = r[\"band_metadata\"][0][1][\"STATISTICS_MINIMUM\"], r[\"band_metadata\"][0][1][\"STATISTICS_MAXIMUM\"]\nprint(\"With values from \", minv, \"to \", maxv)\n</pre>  url = \"https://data.geo.admin.ch/ch.swisstopo.swissalti3d/swissalti3d_2019_2573-1085/swissalti3d_2019_2573-1085_0.5_2056_5728.tif\"  # Fetch File Metadata to get min/max rescaling values (because the file is stored as float32) r = httpx.get(     f\"{titiler_endpoint}/cog/info\",     params = {         \"url\": url,     } ).json()  print(r) print(\"Data is of type:\", r[\"dtype\"])  # This dataset has statistics metadata minv, maxv = r[\"band_metadata\"][0][1][\"STATISTICS_MINIMUM\"], r[\"band_metadata\"][0][1][\"STATISTICS_MAXIMUM\"] print(\"With values from \", minv, \"to \", maxv)   In\u00a0[\u00a0]: Copied! <pre># We could get the min/max values using the statistics endpoint\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/statistics\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nprint(json.dumps(r[\"1\"], indent=4))\n</pre> # We could get the min/max values using the statistics endpoint r = httpx.get(     f\"{titiler_endpoint}/cog/statistics\",     params = {         \"url\": url,     } ).json()  print(json.dumps(r[\"1\"], indent=4)) In\u00a0[\u00a0]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m <ol> <li>Apply linear rescaling using Min/Max value</li> </ol> <p>This is needed to rescale the value to byte (0 -&gt; 255) which can then be encoded in JPEG or PNG</p> In\u00a0[\u00a0]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n        \"rescale\": f\"{minv},{maxv}\"\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,         \"rescale\": f\"{minv},{maxv}\"     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m <ol> <li>Apply ColorMap</li> </ol> <p>Now that the data is rescaled to byte values (0 -&gt; 255) we can apply a colormap</p> In\u00a0[\u00a0]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n        \"rescale\": f\"{minv},{maxv}\",\n        \"colormap_name\": \"terrain\"\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,         \"rescale\": f\"{minv},{maxv}\",         \"colormap_name\": \"terrain\"     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m <ol> <li>Apply non-linear colormap (intervals)</li> </ol> <p>see https://cogeotiff.github.io/rio-tiler/colormap/#intervals-colormaps</p> In\u00a0[\u00a0]: Copied! <pre>import json\n\ncmap = json.dumps(\n    [\n        # ([min, max], [r, g, b, a])\n        ([0, 1500], [255,255,204, 255]),\n        ([1500, 1700], [161,218,180, 255]),\n        ([1700, 1900], [65,182,196, 255]),\n        ([1900, 2000], [44,127,184, 255]),\n        ([2000, 3000], [37,52,148, 255]),\n    ]\n)\n# https://colorbrewer2.org/#type=sequential&amp;scheme=YlGnBu&amp;n=5\n\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n        \"colormap\": cmap\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> import json  cmap = json.dumps(     [         # ([min, max], [r, g, b, a])         ([0, 1500], [255,255,204, 255]),         ([1500, 1700], [161,218,180, 255]),         ([1700, 1900], [65,182,196, 255]),         ([1900, 2000], [44,127,184, 255]),         ([2000, 3000], [37,52,148, 255]),     ] ) # https://colorbrewer2.org/#type=sequential&amp;scheme=YlGnBu&amp;n=5  r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,         \"colormap\": cmap     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#working-with-cog","title":"Working With COG\u00b6","text":"<p>For this demo we will use the new <code>DigitalGlobe OpenData</code> dataset https://www.digitalglobe.com/ecosystem/open-data</p>"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#requirements","title":"Requirements\u00b6","text":"<ul> <li>folium</li> <li>httpx</li> </ul> <p><code>pip install folium httpx</code></p>"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#get-cog-info","title":"Get COG Info\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#get-cog-metadata","title":"Get COG Metadata\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#display-tiles","title":"Display Tiles\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#work-with-non-byte-data","title":"Work with non-byte data\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#display-tiles","title":"Display Tiles\u00b6","text":"<ol> <li>Without <code>rescaling</code> values, TiTiler will return black/grey tiles because it will rescale the data base on min/max value of the datatype.</li> </ol>"},{"location":"examples/backups/","title":"Backups","text":"In\u00a0[1]: Copied! <pre>import kmaps\n</pre> import kmaps In\u00a0[2]: Copied! <pre>m = kmaps.Map()\nm\n</pre> m = kmaps.Map() m <pre>Map(center=[37.5, 127], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_\u2026</pre> In\u00a0[3]: Copied! <pre>m.add_base_dropdown()\n</pre> m.add_base_dropdown() In\u00a0[3]: Copied! <pre># raw url\nurl = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n</pre> # raw url url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" In\u00a0[4]: Copied! <pre>m.add_raster(url)\n</pre> m.add_raster(url) In\u00a0[5]: Copied! <pre># only with ipyleaflet\nm.layers[-1].opacity = 0.5\n</pre> # only with ipyleaflet m.layers[-1].opacity = 0.5 In\u00a0[6]: Copied! <pre>m.layers[-1].interact(opacity = (0, 1, 0.01))\n</pre> m.layers[-1].interact(opacity = (0, 1, 0.01)) <pre>Box(children=(FloatSlider(value=0.5, description='opacity', max=1.0, step=0.01),))</pre> In\u00a0[7]: Copied! <pre>m.layers[0].interact(opacity = (0, 1, 0.01))\n</pre> m.layers[0].interact(opacity = (0, 1, 0.01)) <pre>Box(children=(FloatSlider(value=1.0, description='opacity', max=1.0, step=0.01),))</pre> In\u00a0[8]: Copied! <pre>from ipyleaflet import WidgetControl\nimport ipywidgets as widgets\n</pre> from ipyleaflet import WidgetControl import ipywidgets as widgets In\u00a0[9]: Copied! <pre>slider = widgets.FloatSlider(value = 0.5, min = 0, max = 1, step = 0.01, description = 'Layer')\nslider\n</pre> slider = widgets.FloatSlider(value = 0.5, min = 0, max = 1, step = 0.01, description = 'Layer') slider <pre>FloatSlider(value=0.5, description='Layer', max=1.0, step=0.01)</pre> In\u00a0[10]: Copied! <pre>widgets.jsdlink((slider, 'value'), (m.layers[-1], 'opacity')) # link between a widget and a layer on the map\n</pre> widgets.jsdlink((slider, 'value'), (m.layers[-1], 'opacity')) # link between a widget and a layer on the map  <pre>DirectionalLink(source=(FloatSlider(value=0.5, description='Layer', max=1.0, step=0.01), 'value'), target=(Til\u2026</pre> In\u00a0[11]: Copied! <pre>control = WidgetControl(widget = slider, position = 'bottomright')\n</pre> control = WidgetControl(widget = slider, position = 'bottomright') In\u00a0[12]: Copied! <pre>m.add(control)\n</pre> m.add(control) <pre>Map(bottom=146454.0, center=[-20.403673802342773, 57.75213430160109], controls=(ZoomControl(options=['position\u2026</pre> In\u00a0[13]: Copied! <pre>url2 = 'https://geography.utk.edu/wp-content/uploads/2022/09/grad_group_photo_fa22_crop-1536x916.jpg'\n</pre> url2 = 'https://geography.utk.edu/wp-content/uploads/2022/09/grad_group_photo_fa22_crop-1536x916.jpg' In\u00a0[14]: Copied! <pre>widget = widgets.HTML(value = f'&lt;img src=\"{url2}\" width = \"100\" height = \"60\"&gt;')\n</pre> widget = widgets.HTML(value = f'') In\u00a0[15]: Copied! <pre>control2 = WidgetControl(widget = widget, position = 'bottomright')\n</pre> control2 = WidgetControl(widget = widget, position = 'bottomright') In\u00a0[16]: Copied! <pre>m.add(control2)\n</pre> m.add(control2) <pre>Map(bottom=146454.0, center=[-20.403673802342773, 57.75213430160109], controls=(ZoomControl(options=['position\u2026</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[5]: Copied! <pre>kmaps.euclidean_dist([0], [1, 1])\n</pre> kmaps.euclidean_dist([0], [1, 1]) <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 kmaps.euclidean_dist([0], [1, 1])\n\nFile c:\\users\\changwha\\documents\\kmaps\\kmaps\\kmaps.py:291, in euclidean_dist(first_coord, second_coord)\n    289 for coord in [first_coord, second_coord]:\n    290     if not isinstance(coord, (list, tuple)) or len(coord) != 2:\n--&gt; 291         raise ValueError('The coordinates must be lists or tuples of length 2.')\n    292     for element in coord:\n    293         if not isinstance(element, (int, float)):\n\nValueError: The coordinates must be lists or tuples of length 2.</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[1]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[2]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\ntoolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"wrench\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\n\nclose_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left  toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"wrench\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), )  close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) In\u00a0[3]: Copied! <pre>toolbar = widgets.HBox([toolbar_button])\ntoolbar\n</pre>  toolbar = widgets.HBox([toolbar_button]) toolbar <pre>HBox(children=(ToggleButton(value=False, icon='wrench', layout=Layout(height='28px', padding='0px 0px 0px 5px'\u2026</pre> In\u00a0[4]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [toolbar_button, close_button]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\n</pre>  def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [toolbar_button, close_button]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/ipywidgets_box/","title":"Ipywidgets box","text":"In\u00a0[\u00a0]: Copied! <pre># import geemap\n# Map = geemap.Map()\n# Map\n</pre> # import geemap # Map = geemap.Map() # Map In\u00a0[1]: Copied! <pre>import ipywidgets as widgets\nimport ipyleaflet\n</pre> import ipywidgets as widgets import ipyleaflet In\u00a0[2]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 4px\"  # upper, right, bottom, left\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 4px\"  # upper, right, bottom, left <p>icon: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[5]: Copied! <pre>toolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"gear\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\ntoolbar_button\n</pre> toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"gear\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), ) toolbar_button <pre>ToggleButton(value=False, icon='gear', layout=Layout(height='28px', padding='0px 0px 0px 4px', width='28px'), \u2026</pre> In\u00a0[5]: Copied! <pre>control = ipyleaflet.WidgetControl(widget = toolbar_button, position = 'bottomright')\n</pre> control = ipyleaflet.WidgetControl(widget = toolbar_button, position = 'bottomright') In\u00a0[6]: Copied! <pre>m1 = ipyleaflet.Map()\nm1.add(control)\nm1\n</pre> m1 = ipyleaflet.Map() m1.add(control) m1 <pre>Map(center=[0.0, 0.0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre> In\u00a0[7]: Copied! <pre>import leafmap\n</pre> import leafmap In\u00a0[8]: Copied! <pre>m2 = leafmap.Map()\nm2\n</pre> m2 = leafmap.Map() m2 <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[\u00a0]: Copied! <pre># toolbar_button.layout.width = \"28px\"\n</pre> # toolbar_button.layout.width = \"28px\" In\u00a0[9]: Copied! <pre>toolbar_button.value\n</pre> toolbar_button.value Out[9]: <pre>False</pre> In\u00a0[10]: Copied! <pre>close_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\nclose_button\n</pre> close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) close_button <pre>ToggleButton(value=False, button_style='primary', icon='times', layout=Layout(height='28px', padding='0px 0px \u2026</pre> In\u00a0[11]: Copied! <pre>widgets.HBox([close_button, toolbar_button])\n#widgets.VBox([close_button, toolbar_button])\n</pre> widgets.HBox([close_button, toolbar_button]) #widgets.VBox([close_button, toolbar_button]) <pre>HBox(children=(ToggleButton(value=False, button_style='primary', icon='times', layout=Layout(height='28px', pa\u2026</pre> In\u00a0[11]: Copied! <pre>box = widgets.HBox()\nbox.children = [close_button, toolbar_button]\nbox\n</pre> box = widgets.HBox() box.children = [close_button, toolbar_button] box <pre>HBox(children=(ToggleButton(value=False, button_style='primary', icon='times', layout=Layout(height='28px', pa\u2026</pre> In\u00a0[12]: Copied! <pre>box.children = [toolbar_button]\n</pre> box.children = [toolbar_button] In\u00a0[12]: Copied! <pre>checkbox = widgets.Checkbox(\n    description=\"Checkbox\",\n    indent=False,\n    layout=widgets.Layout(padding=padding, width=widget_width),\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     description=\"Checkbox\",     indent=False,     layout=widgets.Layout(padding=padding, width=widget_width), ) checkbox <pre>Checkbox(value=False, description='Checkbox', indent=False, layout=Layout(padding='0px 0px 0px 4px', width='25\u2026</pre> In\u00a0[14]: Copied! <pre>checkbox.value\n</pre> checkbox.value Out[14]: <pre>False</pre> In\u00a0[28]: Copied! <pre>states_dropdown = widgets.Dropdown(\n    options = [('', m1.center), ('Alabama', [32.5486057, -89.3217729]), ('Alaska', [59.6773403, -179.4672574]), ('Arizona', [34.1400162, -114.5716614]), ('Tennessee', [35.8016335, -88.6193277])],\n    value = m1.center,\n    description = 'States',\n    style = {'description_width': 'initial'}\n)\n'''\ndef on_click(change):\n    basemap_name = change[\"new\"]\n    old_basemap = self.layers[-1]\n    self.substitute_layer(old_basemap, basemaps[basemap_name])\n\ndropdown.observe(on_click, \"value\")\n'''\n</pre> states_dropdown = widgets.Dropdown(     options = [('', m1.center), ('Alabama', [32.5486057, -89.3217729]), ('Alaska', [59.6773403, -179.4672574]), ('Arizona', [34.1400162, -114.5716614]), ('Tennessee', [35.8016335, -88.6193277])],     value = m1.center,     description = 'States',     style = {'description_width': 'initial'} ) ''' def on_click(change):     basemap_name = change[\"new\"]     old_basemap = self.layers[-1]     self.substitute_layer(old_basemap, basemaps[basemap_name])  dropdown.observe(on_click, \"value\") '''  Out[28]: <pre>'\\ndef on_click(change):\\n    basemap_name = change[\"new\"]\\n    old_basemap = self.layers[-1]\\n    self.substitute_layer(old_basemap, basemaps[basemap_name])\\n\\ndropdown.observe(on_click, \"value\")\\n'</pre> In\u00a0[33]: Copied! <pre>print(states_dropdown)\n</pre> print(states_dropdown) <pre>Dropdown(description='States', options=(('', [0.0, 0.0]), ('Alabama', [32.5486057, -89.3217729]), ('Alaska', [59.6773403, -179.4672574]), ('Arizona', [34.1400162, -114.5716614]), ('Tennessee', [35.8016335, -88.6193277])), style=DescriptionStyle(description_width='initial'), value=[0.0, 0.0])\n</pre> In\u00a0[25]: Copied! <pre>states_dropdown.value\n</pre> states_dropdown.value Out[25]: <pre>[35.8016335, -88.6193277]</pre> In\u00a0[26]: Copied! <pre>m1.center\n</pre> m1.center Out[26]: <pre>[0.0, 0.0]</pre> In\u00a0[23]: Copied! <pre>states_control = ipyleaflet.WidgetControl(widget = states_dropdown, position = 'topright')\n\nwidgets.jslink((m1, 'center'), (states_dropdown, 'value'))\n</pre> states_control = ipyleaflet.WidgetControl(widget = states_dropdown, position = 'topright')  widgets.jslink((m1, 'center'), (states_dropdown, 'value')) <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[23], line 3\n      1 states_control = ipyleaflet.WidgetControl(widget = states_dropdown, position = 'topright')\n----&gt; 3 widgets.jslink((m1, 'center'), (states_dropdown, 'value'))\n\nFile c:\\Users\\Changwha\\Anaconda3\\envs\\geog510\\lib\\site-packages\\ipywidgets\\widgets\\widget_link.py:75, in jslink(attr1, attr2)\n     59 def jslink(attr1, attr2):\n     60     \"\"\"Link two widget attributes on the frontend so they remain in sync.\n     61 \n     62     The link is created in the front-end and does not rely on a roundtrip\n   (...)\n     73     &gt;&gt;&gt; c = link((widget1, 'value'), (widget2, 'value'))\n     74     \"\"\"\n---&gt; 75     return Link(attr1, attr2)\n\nFile c:\\Users\\Changwha\\Anaconda3\\envs\\geog510\\lib\\site-packages\\ipywidgets\\widgets\\widget_link.py:52, in Link.__init__(self, source, target, **kwargs)\n     50 kwargs['source'] = source\n     51 kwargs['target'] = target\n---&gt; 52 super(Link, self).__init__(**kwargs)\n\nFile c:\\Users\\Changwha\\Anaconda3\\envs\\geog510\\lib\\site-packages\\ipywidgets\\widgets\\widget.py:477, in Widget.__init__(self, **kwargs)\n    475 \"\"\"Public constructor\"\"\"\n    476 self._model_id = kwargs.pop('model_id', None)\n--&gt; 477 super(Widget, self).__init__(**kwargs)\n    479 Widget._call_widget_constructed(self)\n    480 self.open()\n\nFile c:\\Users\\Changwha\\Anaconda3\\envs\\geog510\\lib\\site-packages\\traitlets\\traitlets.py:1347, in HasTraits.__init__(self, *args, **kwargs)\n   1345 for key, value in kwargs.items():\n   1346     if self.has_trait(key):\n-&gt; 1347         setattr(self, key, value)\n   1348         changes[key] = Bunch(\n   1349             name=key,\n   1350             old=None,\n   (...)\n   1353             type=\"change\",\n   1354         )\n   1355     else:\n   1356         # passthrough args that don't set traits to super\n\nFile c:\\Users\\Changwha\\Anaconda3\\envs\\geog510\\lib\\site-packages\\traitlets\\traitlets.py:732, in TraitType.__set__(self, obj, value)\n    730     raise TraitError('The \"%s\" trait is read-only.' % self.name)\n    731 else:\n--&gt; 732     self.set(obj, value)\n\nFile c:\\Users\\Changwha\\Anaconda3\\envs\\geog510\\lib\\site-packages\\traitlets\\traitlets.py:706, in TraitType.set(self, obj, value)\n    705 def set(self, obj, value):\n--&gt; 706     new_value = self._validate(obj, value)\n    707     try:\n    708         old_value = obj._trait_values[self.name]\n\nFile c:\\Users\\Changwha\\Anaconda3\\envs\\geog510\\lib\\site-packages\\traitlets\\traitlets.py:738, in TraitType._validate(self, obj, value)\n    736     return value\n    737 if hasattr(self, \"validate\"):\n--&gt; 738     value = self.validate(obj, value)\n    739 if obj._cross_validation_lock is False:\n    740     value = self._cross_validate(obj, value)\n\nFile c:\\Users\\Changwha\\Anaconda3\\envs\\geog510\\lib\\site-packages\\traitlets\\traitlets.py:2871, in Container.validate(self, obj, value)\n   2868 if value is None:\n   2869     return value\n-&gt; 2871 value = self.validate_elements(obj, value)\n   2873 return value\n\nFile c:\\Users\\Changwha\\Anaconda3\\envs\\geog510\\lib\\site-packages\\ipywidgets\\widgets\\widget_link.py:33, in WidgetTraitTuple.validate_elements(self, obj, value)\n     31     raise TypeError(\"No such trait: %s\" % trait_repr)\n     32 elif not trait.metadata.get('sync'):\n---&gt; 33     raise TypeError(\"%s cannot be synced\" % trait_repr)\n     34 return value\n\nTypeError: Dropdown.value cannot be synced</pre> In\u00a0[31]: Copied! <pre>m1 = ipyleaflet.Map()\nm1\n</pre> m1 = ipyleaflet.Map() m1 <pre>Map(center=[0.0, 0.0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre> In\u00a0[32]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"Tennessee\", \"California\", \"Iowa\", \"Texas\"],\n    #value=None,\n    description=\"Dropdown:\",\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\nprint(dropdown)\n</pre> dropdown = widgets.Dropdown(     options=[\"Tennessee\", \"California\", \"Iowa\", \"Texas\"],     #value=None,     description=\"Dropdown:\",     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) print(dropdown) <pre>Dropdown(description='Dropdown:', layout=Layout(padding='0px 0px 0px 4px', width='250px'), options=('Tennessee', 'California', 'Iowa', 'Texas'), style=DescriptionStyle(description_width='initial'), value='Tennessee')\n</pre> In\u00a0[16]: Copied! <pre>int_slider = widgets.IntSlider(\n    min=1,\n    max=15,\n    step=1,\n    description=\"Int Slider: \",\n    readout=True,\n    continuous_update=True,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     min=1,     max=15,     step=1,     description=\"Int Slider: \",     readout=True,     continuous_update=True,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) int_slider <pre>IntSlider(value=1, description='Int Slider: ', layout=Layout(padding='0px 0px 0px 4px', width='250px'), max=15\u2026</pre> In\u00a0[17]: Copied! <pre>float_slider = widgets.FloatSlider(\n    min=0,\n    max=100,\n    step=0.1,\n    description=\"Float Slider: \",\n    readout=True,\n    continuous_update=True,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\nfloat_slider\n</pre> float_slider = widgets.FloatSlider(     min=0,     max=100,     step=0.1,     description=\"Float Slider: \",     readout=True,     continuous_update=True,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) float_slider <pre>FloatSlider(value=0.0, description='Float Slider: ', layout=Layout(padding='0px 0px 0px 4px', width='250px'), \u2026</pre> In\u00a0[18]: Copied! <pre>color = widgets.ColorPicker(\n    concise=False,\n    description=\"Color:\",\n    value=\"black\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ncolor\n</pre> color = widgets.ColorPicker(     concise=False,     description=\"Color:\",     value=\"black\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) color <pre>ColorPicker(value='black', description='Color:', layout=Layout(padding='0px 0px 0px 4px', width='250px'), styl\u2026</pre> In\u00a0[19]: Copied! <pre>text = widgets.Text(\n    value=\"\",\n    description=\"Textbox:\",\n    placeholder=\"Enter sth.\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ntext\n</pre> text = widgets.Text(     value=\"\",     description=\"Textbox:\",     placeholder=\"Enter sth.\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) text <pre>Text(value='', description='Textbox:', layout=Layout(padding='0px 0px 0px 4px', width='250px'), placeholder='E\u2026</pre> In\u00a0[20]: Copied! <pre>textarea = widgets.Textarea(\n    placeholder=\"Placeholder\",\n    layout=widgets.Layout(width=widget_width),\n)\ntextarea\n</pre> textarea = widgets.Textarea(     placeholder=\"Placeholder\",     layout=widgets.Layout(width=widget_width), ) textarea <pre>Textarea(value='', layout=Layout(width='250px'), placeholder='Placeholder')</pre> In\u00a0[21]: Copied! <pre>buttons = widgets.ToggleButtons(\n    value=None,\n    options=[\"Apply\", \"Reset\", \"Close\"],\n    tooltips=[\"Apply\", \"Reset\", \"Close\"],\n    button_style=\"danger\",\n)\nbuttons.style.button_width = \"80px\"\nbuttons\n</pre> buttons = widgets.ToggleButtons(     value=None,     options=[\"Apply\", \"Reset\", \"Close\"],     tooltips=[\"Apply\", \"Reset\", \"Close\"],     button_style=\"danger\", ) buttons.style.button_width = \"80px\" buttons <pre>ToggleButtons(button_style='danger', options=('Apply', 'Reset', 'Close'), style=ToggleButtonsStyle(button_widt\u2026</pre> In\u00a0[22]: Copied! <pre>output = widgets.Output(layout=widgets.Layout(width=widget_width, padding=padding))\nwith output:\n    output.clear_output()\n    print(\"Running ...\")\noutput\n</pre> output = widgets.Output(layout=widgets.Layout(width=widget_width, padding=padding)) with output:     output.clear_output()     print(\"Running ...\") output <pre>Output(layout=Layout(padding='0px 0px 0px 4px', width='250px'))</pre> In\u00a0[23]: Copied! <pre>output.clear_output()\n</pre> output.clear_output() In\u00a0[24]: Copied! <pre>with output:\n    #output.clear_output()\n    print('Running. Please wait.')\n    #display(buttons)\n</pre> with output:     #output.clear_output()     print('Running. Please wait.')     #display(buttons) In\u00a0[25]: Copied! <pre>toolbar_widget = widgets.VBox()\ntoolbar_widget.children = [\n    widgets.HBox([close_button, toolbar_button]),\n    checkbox,\n    int_slider,\n    float_slider,\n    dropdown,\n    text,\n    color,\n    textarea,\n    buttons,\n    output,\n]\ntoolbar_widget\n</pre> toolbar_widget = widgets.VBox() toolbar_widget.children = [     widgets.HBox([close_button, toolbar_button]),     checkbox,     int_slider,     float_slider,     dropdown,     text,     color,     textarea,     buttons,     output, ] toolbar_widget <pre>VBox(children=(HBox(children=(ToggleButton(value=False, button_style='primary', icon='times', layout=Layout(he\u2026</pre> In\u00a0[26]: Copied! <pre>control = ipyleaflet.WidgetControl(widget = toolbar_widget, position = 'bottomright')\n</pre> control = ipyleaflet.WidgetControl(widget = toolbar_widget, position = 'bottomright') In\u00a0[27]: Copied! <pre>m = ipyleaflet.Map(center = [40, -100], zoom = 4)\nm\n</pre> m = ipyleaflet.Map(center = [40, -100], zoom = 4) m <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre> In\u00a0[28]: Copied! <pre>m.add_control(control)\n</pre> m.add_control(control) In\u00a0[29]: Copied! <pre>widgets.jslink((m, 'zoom'), (int_slider, 'value'))\n</pre> widgets.jslink((m, 'zoom'), (int_slider, 'value')) <pre>Link(source=(Map(bottom=1751.0, center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', \u2026</pre>"},{"location":"examples/practice/","title":"Practice","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\nimport geopandas as gpd\nimport numpy as np\nimport random\n\nfrom shapely.geometry import Polygon\n\nimport matplotlib.pyplot as plt\n</pre> import pandas as pd import geopandas as gpd import numpy as np import random  from shapely.geometry import Polygon  import matplotlib.pyplot as plt In\u00a0[2]: Copied! <pre># Load the point shapefile\npoints = gpd.read_file('data/BuildingsCentroids_OSM_UTK.shp')\n</pre> # Load the point shapefile points = gpd.read_file('data/BuildingsCentroids_OSM_UTK.shp') In\u00a0[3]: Copied! <pre>points = points[0:10]\n</pre> points = points[0:10] In\u00a0[4]: Copied! <pre>points\n</pre> points Out[4]: name w geometry 0 Neyland Stadium 3 POINT (-83.92569 35.95466) 1 Humanities and Social Sciences 3 POINT (-83.92902 35.95367) 2 McClung Tower 6 POINT (-83.92897 35.95408) 3 University Printing &amp; Mail 4 POINT (-83.92825 35.94675) 4 UT Warehouse 3 POINT (-83.92908 35.94662) 5 NaN 2 POINT (-83.93060 35.94640) 6 UT Warehouse 3 POINT (-83.92970 35.94656) 7 NaN 1 POINT (-83.92942 35.94971) 8 Alumni Memorial Building 3 POINT (-83.92631 35.95601) 9 Ayres Hall 3 POINT (-83.92592 35.95744) In\u00a0[2]: Copied! <pre># point pattern generator\ndef PointsGen(Xls, Yls):\n    IDls = []\n    for i in range(0, len(Xls)):\n        IDls.append(i + 1)\n    df_dict = {'ID': IDls, 'XCoord': Xls, 'YCoord': Yls}\n    df = pd.DataFrame(df_dict)\n    df = gpd.GeoDataFrame(df, geometry = gpd.points_from_xy(Xls, Yls))\n    return df\n</pre> # point pattern generator def PointsGen(Xls, Yls):     IDls = []     for i in range(0, len(Xls)):         IDls.append(i + 1)     df_dict = {'ID': IDls, 'XCoord': Xls, 'YCoord': Yls}     df = pd.DataFrame(df_dict)     df = gpd.GeoDataFrame(df, geometry = gpd.points_from_xy(Xls, Yls))     return df In\u00a0[3]: Copied! <pre># generate demand weights\ndef weight_gen(points):\n    num = len(points)\n    points['Weight'] = np.random.poisson(4, num)\n    #points['Weight'] = 9 * (points['XCoord'] + points['YCoord']) + 1 + 0.01 * (np.random.normal(0, 1, num))\n    #points['Weight'] = 5 * ((points['XCoord'] + points['YCoord']) ** 2) + 1 + 0.01 * (np.random.normal(0, 1, num))\n    #points['Weight'] = 5 * (np.sin(points['XCoord'] * np.pi) + 2 * np.sin(points['YCoord'] * np.pi)) + 1 + 0.01 * (np.random.normal(0, 1, num))\n    return points\n</pre> # generate demand weights def weight_gen(points):     num = len(points)     points['Weight'] = np.random.poisson(4, num)     #points['Weight'] = 9 * (points['XCoord'] + points['YCoord']) + 1 + 0.01 * (np.random.normal(0, 1, num))     #points['Weight'] = 5 * ((points['XCoord'] + points['YCoord']) ** 2) + 1 + 0.01 * (np.random.normal(0, 1, num))     #points['Weight'] = 5 * (np.sin(points['XCoord'] * np.pi) + 2 * np.sin(points['YCoord'] * np.pi)) + 1 + 0.01 * (np.random.normal(0, 1, num))     return points In\u00a0[4]: Copied! <pre># generate boundary\nx_coords = [0, 1, 1, 0]\ny_coords = [0, 0, 1, 1]\npolygon_geom = Polygon(zip(x_coords, y_coords))\nextent = gpd.GeoDataFrame(index = [0], geometry = [polygon_geom])\ndel x_coords, y_coords, polygon_geom\n</pre> # generate boundary x_coords = [0, 1, 1, 0] y_coords = [0, 0, 1, 1] polygon_geom = Polygon(zip(x_coords, y_coords)) extent = gpd.GeoDataFrame(index = [0], geometry = [polygon_geom]) del x_coords, y_coords, polygon_geom In\u00a0[\u00a0]: Copied! <pre># generate a point set\npoints = PointsGen(np.random.beta(1, 1, 50), np.random.beta(1, 1, 50))\npoints = weight_gen(points)\n</pre> # generate a point set points = PointsGen(np.random.beta(1, 1, 50), np.random.beta(1, 1, 50)) points = weight_gen(points) In\u00a0[5]: Copied! <pre># Set the number of facilities (p)\np = 2\n\n# Define parameters for simulated annealing\ntemperature = 30\nmax_iter = 10\ncooling_rate = 0.70\ntol_val = 10\n</pre> # Set the number of facilities (p) p = 2  # Define parameters for simulated annealing temperature = 30 max_iter = 10 cooling_rate = 0.70 tol_val = 10 In\u00a0[6]: Copied! <pre># Generate an initial solution randomly\ninitial_solution = random.sample(range(len(points)), p)\n</pre> # Generate an initial solution randomly initial_solution = random.sample(range(len(points)), p) In\u00a0[7]: Copied! <pre>def calculate_total_cost(points, weight, solution):\n    total_cost = 0\n    for point in points.geometry:\n        distances = point.distance(points.geometry[best_solution])\n        cost_ls = []\n        for idx in best_solution:\n            distance = distances[idx] \n            w = points[weight][idx]\n        cost_ls.append(distance * w)\n        total_cost += min(cost_ls)\n    return total_cost\n</pre> def calculate_total_cost(points, weight, solution):     total_cost = 0     for point in points.geometry:         distances = point.distance(points.geometry[best_solution])         cost_ls = []         for idx in best_solution:             distance = distances[idx]              w = points[weight][idx]         cost_ls.append(distance * w)         total_cost += min(cost_ls)     return total_cost In\u00a0[8]: Copied! <pre># Calculate the total cost of the initial solution\ncurrent_solution = initial_solution\nbest_solution = initial_solution\nbest_cost = calculate_total_cost(points, 'w', best_solution)\nbest_cost\n</pre> # Calculate the total cost of the initial solution current_solution = initial_solution best_solution = initial_solution best_cost = calculate_total_cost(points, 'w', best_solution) best_cost Out[8]: <pre>0.158917932736568</pre> In\u00a0[9]: Copied! <pre># Simulated annealing algorithm\noptsol_ls = []\nsim_ls = []\noptsol_ls.append(best_cost)\nsim_ls.append(best_cost)\ncount = 0\nwhile temperature &gt; tol_val:\n    while count &lt; max_iter:\n        # Generate a new solution by swapping two facilities\n        new_solution = current_solution.copy()\n        idx1 = random.choice(range(p))\n        idx2 = random.choice([idx for idx in range(len(points)) if idx not in current_solution])\n        new_solution[idx1] = idx2\n        count += 1\n\n        # Calculate the cost of the new solution\n        new_cost = calculate_total_cost(points, 'w', new_solution)\n        sim_ls.append(new_cost)\n\n        if new_cost &lt; best_cost:\n            current_solution = new_solution\n            best_solution = new_solution\n            best_cost = new_cost\n            optsol_ls.append(best_cost)\n            count = 0\n        \n        elif random.random() &lt; np.exp((best_cost - new_cost) / temperature):\n            current_solution = new_solution\n            best_solution = new_solution\n            best_cost = new_cost\n            optsol_ls.append(best_cost)\n            count = 0\n            \n    temperature *= cooling_rate\n    count = 0\n</pre> # Simulated annealing algorithm optsol_ls = [] sim_ls = [] optsol_ls.append(best_cost) sim_ls.append(best_cost) count = 0 while temperature &gt; tol_val:     while count &lt; max_iter:         # Generate a new solution by swapping two facilities         new_solution = current_solution.copy()         idx1 = random.choice(range(p))         idx2 = random.choice([idx for idx in range(len(points)) if idx not in current_solution])         new_solution[idx1] = idx2         count += 1          # Calculate the cost of the new solution         new_cost = calculate_total_cost(points, 'w', new_solution)         sim_ls.append(new_cost)          if new_cost &lt; best_cost:             current_solution = new_solution             best_solution = new_solution             best_cost = new_cost             optsol_ls.append(best_cost)             count = 0                  elif random.random() &lt; np.exp((best_cost - new_cost) / temperature):             current_solution = new_solution             best_solution = new_solution             best_cost = new_cost             optsol_ls.append(best_cost)             count = 0                  temperature *= cooling_rate     count = 0 In\u00a0[76]: Copied! <pre>plt.plot(optsol_ls)\n</pre> plt.plot(optsol_ls) Out[76]: <pre>[&lt;matplotlib.lines.Line2D at 0x254e5c4e820&gt;]</pre> In\u00a0[78]: Copied! <pre>points[0:2]\n</pre> points[0:2] Out[78]: ID XCoord YCoord geometry Weight 0 1 0.696584 0.565111 POINT (0.69658 0.56511) 3 1 2 0.965807 0.184291 POINT (0.96581 0.18429) 6 In\u00a0[79]: Copied! <pre>facility_locations = points.iloc[best_solution].geometry\n</pre> facility_locations = points.iloc[best_solution].geometry In\u00a0[87]: Copied! <pre># display the result from CVXPY\nplt.rcParams['figure.figsize'] = [8, 8]\nfig, ax = plt.subplots(1, 1)\nax.set_aspect('equal')\nextent.boundary.plot(ax = ax, edgecolor = '#393739', linestyle = '--', linewidth = 0.5)\ngpd.GeoDataFrame(geometry = facility_locations).plot(ax = ax, color = 'black', alpha = 0.8, markersize = 60)\npoints.plot(ax = ax, color = 'grey', alpha = 0.6, markersize = 20)\n\nplt.xlim([-0.05, 1.05])\nplt.ylim([-0.05, 1.05])\n</pre> # display the result from CVXPY plt.rcParams['figure.figsize'] = [8, 8] fig, ax = plt.subplots(1, 1) ax.set_aspect('equal') extent.boundary.plot(ax = ax, edgecolor = '#393739', linestyle = '--', linewidth = 0.5) gpd.GeoDataFrame(geometry = facility_locations).plot(ax = ax, color = 'black', alpha = 0.8, markersize = 60) points.plot(ax = ax, color = 'grey', alpha = 0.6, markersize = 20)  plt.xlim([-0.05, 1.05]) plt.ylim([-0.05, 1.05]) Out[87]: <pre>(-0.05, 1.05)</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/toolbar/","title":"Toolbar","text":"In\u00a0[1]: Copied! <pre>import geosdemo\nimport ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\nimport kmaps\n</pre> import geosdemo import ipywidgets as widgets from ipyleaflet import WidgetControl import kmaps In\u00a0[2]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\ntoolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"wrench\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\n\nclose_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left  toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"wrench\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), )  close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) In\u00a0[3]: Copied! <pre>toolbar = widgets.HBox([toolbar_button])\ntoolbar\n</pre> toolbar = widgets.HBox([toolbar_button]) toolbar <pre>HBox(children=(ToggleButton(value=False, icon='wrench', layout=Layout(height='28px', padding='0px 0px 0px 5px'\u2026</pre> In\u00a0[4]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [toolbar_button, close_button]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [toolbar_button, close_button]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") In\u00a0[5]: Copied! <pre>def close_click(change):\n    if change[\"new\"]:\n        toolbar_button.close()\n        close_button.close()\n        toolbar.close()\n        \nclose_button.observe(close_click, \"value\")\ntoolbar\n</pre> def close_click(change):     if change[\"new\"]:         toolbar_button.close()         close_button.close()         toolbar.close()          close_button.observe(close_click, \"value\") toolbar <pre>HBox(children=(ToggleButton(value=False, icon='wrench', layout=Layout(height='28px', padding='0px 0px 0px 5px'\u2026</pre> In\u00a0[6]: Copied! <pre>rows = 2\ncols = 2\ngrid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n</pre> rows = 2 cols = 2 grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")) <p>icons: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[7]: Copied! <pre>icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\nfor i in range(rows):\n    for j in range(cols):\n        grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\ngrid\n</pre> icons = [\"folder-open\", \"map\", \"info\", \"question\"]  for i in range(rows):     for j in range(cols):         grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j],                                      layout=widgets.Layout(width=\"28px\", padding=\"0px\")) grid <pre>GridspecLayout(children=(Button(button_style='primary', icon='folder-open', layout=Layout(grid_area='widget001\u2026</pre> In\u00a0[8]: Copied! <pre>toolbar = widgets.VBox([toolbar_button])\n</pre> toolbar = widgets.VBox([toolbar_button]) In\u00a0[9]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\ntoolbar\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") toolbar <pre>VBox(children=(ToggleButton(value=False, icon='wrench', layout=Layout(height='28px', padding='0px 0px 0px 5px'\u2026</pre> In\u00a0[10]: Copied! <pre>toolbar_ctrl = WidgetControl(widget = toolbar, position = 'bottomright')\n</pre> toolbar_ctrl = WidgetControl(widget = toolbar, position = 'bottomright') In\u00a0[11]: Copied! <pre>m = kmaps.Map()\n#m.add_control(toolbar_ctrl)\nm\n</pre> m = kmaps.Map() #m.add_control(toolbar_ctrl) m <pre>Map(center=[37.5, 127], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_\u2026</pre> In\u00a0[12]: Copied! <pre>output = widgets.Output()\noutput_ctrl = WidgetControl(widget=output, position=\"bottomright\")\n#m.add_control(output_ctrl)\n</pre> output = widgets.Output() output_ctrl = WidgetControl(widget=output, position=\"bottomright\") #m.add_control(output_ctrl) In\u00a0[13]: Copied! <pre>basemap = widgets.Dropdown(\n    options = ['Satellite', 'Roadmap'],\n    value = None,\n    description = 'Basemap',\n)\nbasemap\n</pre> basemap = widgets.Dropdown(     options = ['Satellite', 'Roadmap'],     value = None,     description = 'Basemap', ) basemap <pre>Dropdown(description='Basemap', options=('Satellite', 'Roadmap'), value=None)</pre> In\u00a0[14]: Copied! <pre>basemap_ctrl = WidgetControl(widget = basemap, position = 'bottomright')\n</pre> basemap_ctrl = WidgetControl(widget = basemap, position = 'bottomright') In\u00a0[15]: Copied! <pre>def change_basemap(change):\n    if change['new']:\n        m.add_basemap(basemap.value)\n</pre> def change_basemap(change):     if change['new']:         m.add_basemap(basemap.value) In\u00a0[16]: Copied! <pre>basemap.observe(change_basemap, 'value')\n</pre> basemap.observe(change_basemap, 'value') In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[17]: Copied! <pre>def tool_click(b):    \n    with output:\n        output.clear_output()\n        print(f\"You clicked the {b.icon} button\")\n\n        if b.icon == 'map':\n            if basemap_ctrl not in m.controls:\n                m.add(basemap_ctrl)\n</pre> def tool_click(b):         with output:         output.clear_output()         print(f\"You clicked the {b.icon} button\")          if b.icon == 'map':             if basemap_ctrl not in m.controls:                 m.add(basemap_ctrl) In\u00a0[18]: Copied! <pre>for i in range(rows):\n    for j in range(cols):\n        tool = grid[i, j]\n        tool.on_click(tool_click)\n</pre> for i in range(rows):     for j in range(cols):         tool = grid[i, j]         tool.on_click(tool_click) <p></p>"},{"location":"examples/toolbar/#creating-a-toolbar-button","title":"Creating a toolbar button\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-event","title":"Adding toolbar event\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-grid","title":"Adding toolbar grid\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-to-ipyleaflet","title":"Adding toolbar to ipyleaflet\u00b6","text":""}]}